<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Computer Vision Week 1 Introduction</title>
    <url>/2020/09/29/CV1/</url>
    <content><![CDATA[<h1 id="What-is-computer-vision"><a href="#What-is-computer-vision" class="headerlink" title="What is computer vision"></a>What is computer vision</h1><blockquote>
<p>Extracting description of images</p>
</blockquote>
<h2 id="Related-Disciplines"><a href="#Related-Disciplines" class="headerlink" title="Related Disciplines"></a>Related Disciplines</h2><ul>
<li>Image processing</li>
<li>Computer graphic</li>
</ul>
<blockquote>
<p>image processing: image -&gt; image<br>computer vision: image -&gt; description<br>computer graphics: description -&gt; image</p>
</blockquote>
<a id="more"></a>

<ul>
<li>Pattern recognition<ul>
<li>recognnising and classifying stimuli in images and other datasets.</li>
</ul>
</li>
<li>Photogrammetry<ul>
<li>obtain measurements from images</li>
</ul>
</li>
<li>Biological vision<ul>
<li>understanding visual perception in humans and animals(studied in Neuroscience, Psychology, Psychophysics)</li>
</ul>
</li>
</ul>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><ul>
<li>Hard writing detection</li>
<li>ORC: optical character recognition</li>
<li>Face detection/Smile detection</li>
<li>Face recognition</li>
<li>Biometrics: Iris Recognition, Fingerprint Recognition</li>
<li>People tracking/Object tracking</li>
<li>Content-base Image Retrieval</li>
<li>Reverse image search</li>
<li>Landmark recognition</li>
<li>Driver assistance</li>
<li>Space exploration</li>
<li>Medical imaging</li>
<li>3D models from images</li>
</ul>
<h1 id="Why-is-vision-difficult"><a href="#Why-is-vision-difficult" class="headerlink" title="Why is vision difficult"></a>Why is vision difficult</h1><blockquote>
<p>~ 50% cerebral cortex is devoted to vision<br>vision consumes ~10% of entire human energy consumption.</p>
</blockquote>
<h2 id="Major-challenges"><a href="#Major-challenges" class="headerlink" title="Major challenges"></a>Major challenges</h2><ul>
<li>One image -&gt; many interpretations<ul>
<li>problem is ill-posed</li>
</ul>
</li>
<li>One object -&gt; many images<ul>
<li>problem is exponentially large</li>
</ul>
</li>
</ul>
<h2 id="Vision-is-an-ill-posed-problem"><a href="#Vision-is-an-ill-posed-problem" class="headerlink" title="Vision is an ill-posed problem"></a>Vision is an ill-posed problem</h2><blockquote>
<p>mapping from world to image is unique(well-posed)<br>This is a “forward problem”<br>mapping form image to world is <strong>NOT</strong> unique(ill-posed)<br>This is an “inverse problem”</p>
</blockquote>
<p>There are mulitple interpretations of an image</p>
<ul>
<li>Vision scales exponentially: one object can generate many images</li>
<li>Viewpoint affect appearance</li>
<li>Illumination affects appearance</li>
<li>Non-rigid deformations affect appearance</li>
<li>Within-category variation in appearance</li>
<li>Discrimination despite variation</li>
<li>Other objects affect appearance</li>
</ul>
<h1 id="Tackling-the-problem-of-vision"><a href="#Tackling-the-problem-of-vision" class="headerlink" title="Tackling the problem of vision"></a>Tackling the problem of vision</h1><blockquote>
<p>Biological approach<br>Computational approach</p>
</blockquote>
<h2 id="Need-for-constraints"><a href="#Need-for-constraints" class="headerlink" title="Need for constraints"></a>Need for constraints</h2><p>To solve these challenges we need to employ constraints/prior/expectations</p>
<ul>
<li>Effects of inference:<ul>
<li>illumination</li>
<li>perspective</li>
<li>prior knowledge: learned familarity with certain objects/ knowledge of image formation process in general</li>
<li>prior exposure/motion/priming: recent/preceding sensory input</li>
<li>current context: surrounding visual scene(and concurrent input in other sensory modalities)</li>
</ul>
</li>
</ul>
<h2 id="Two-Main-Approaches"><a href="#Two-Main-Approaches" class="headerlink" title="Two Main Approaches"></a>Two Main Approaches</h2><ul>
<li>Engineering Approach<ul>
<li>determine what the system needs to do(requirements)</li>
<li>design a system to perform this task</li>
<li>implement the system, test and refine it.</li>
<li>“top down”: start with computational theory annd fill out details</li>
</ul>
</li>
<li>Reverse Engineering Approach<ul>
<li>find a system that performs the task(e.g. the brain)</li>
<li>analyse the system to determine how it does it.</li>
<li>implement a new system using the same mechanisms.</li>
<li>“bottom -up”: start with mechanisms and build a model.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode</title>
    <url>/2022/09/27/Leetcode/</url>
    <content><![CDATA[<h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><p>养成coding习惯和复习算法，所以从2020年5月开始刷题。<br>刷题为美服：<a href="https://leetcode.com/celiaqian">https://leetcode.com/celiaqian</a><br>主要语言： c++</p>
<p><strong>配套刷题精选题</strong>：<br><a href="https://celia-qian.gitbook.io/leetcode-notebook-2020-2021/">https://celia-qian.gitbook.io/leetcode-notebook-2020-2021/</a></p>
<p><strong>同步更新GitHub库</strong>：<br><a href="https://github.com/CeliaChien/leetcode">https://github.com/CeliaChien/leetcode</a></p>
<p><strong>leetcode周赛精选</strong>：<br><a href="http://celiachien.github.io/tags/Leetcode/">http://celiachien.github.io/tags/Leetcode/</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Vision Week 2 Image Formation</title>
    <url>/2020/10/06/CV2/</url>
    <content><![CDATA[<h1 id="Overview-of-image-formation"><a href="#Overview-of-image-formation" class="headerlink" title="Overview of image formation"></a>Overview of image formation</h1><ul>
<li><strong>Light</strong> from a <strong>radiation source</strong> is <strong>reflected</strong> by <strong>surfaces</strong> in the world..</li>
<li>Refleted light passes through some <strong>optics</strong> and is recorded by a <strong>sensor</strong></li>
<li>Images are formed when a sensor registers <strong>radiation</strong> that has interacted with physical objects<a id="more"></a>

</li>
</ul>
<h1 id="Physics-of-image-formation"><a href="#Physics-of-image-formation" class="headerlink" title="Physics of image formation"></a>Physics of image formation</h1><ul>
<li>ligth</li>
<li>reflectance</li>
<li>optics</li>
</ul>
<h1 id="Ingredients-of-image-formation"><a href="#Ingredients-of-image-formation" class="headerlink" title="Ingredients of image formation"></a>Ingredients of image formation</h1><p>The image that is formed is affected by two sets of parameters</p>
<p><strong>Radiometric parameters</strong><br>Determine the intensity/colour of a given location in the image</p>
<ul>
<li>illumination(type, number, location, intensity, colour-spectrum)</li>
<li>surface reflectance properties(material, orientation)</li>
<li>sensor properties(sensitivity to different electromagnetic frequencies)</li>
</ul>
<p><strong>Geometric parameters</strong><br>Determine where on the image a scene point appears</p>
<ul>
<li>camera position and orientation in space</li>
<li>camera optics(e.g. focal length)</li>
<li>projection geometry(mapping from 3D to 2D)</li>
</ul>
<h1 id="Light-and-Colour"><a href="#Light-and-Colour" class="headerlink" title="Light and Colour"></a>Light and Colour</h1><h2 id="visible-spectrum"><a href="#visible-spectrum" class="headerlink" title="visible spectrum"></a>visible spectrum</h2><p>At the earth’s surface the intensity of the electromagnetic radiation emanating from the sun has a peak within the 400-700nm range.</p>
<ul>
<li>The human eye has evolved a specific sensitivity to this part of the electromagnetic spectrum.</li>
<li>Hence, visible light is that part of the electromagnetic spectrum with a wavelength (λ) between 400 and 700nm.</li>
<li>Cameras and Computer Vision systems also concentrate on this part of the spectrum (but not exclusively, e.g. infra-red cameras for detecting body heat, X-rays for imaging inside the body).</li>
</ul>
<h2 id="Colour-Perception"><a href="#Colour-Perception" class="headerlink" title="Colour Perception"></a>Colour Perception</h2><ul>
<li>The radiation that drives the human construct of colour, is fundamentally colour less.</li>
<li>The sensation of colour is determined by the human visual system, based on the product of light and reflectance.</li>
<li>However, it is a convenient short-hand to refer to electormagnetic radiation as having colour, e.g. to say “red-light” or “blue-light”.</li>
</ul>
<h2 id="Luminance"><a href="#Luminance" class="headerlink" title="Luminance"></a>Luminance</h2><p>Light is differentially reflected at each wavelength, which gives objects their natural colours.</p>
<p><strong>albedo</strong> = fraction of light reflected at a particular wavelength<br>An object looks green because is absorbes red and blue light leaving<br>more green in the reflected light.</p>
<h2 id="Illuminance"><a href="#Illuminance" class="headerlink" title="Illuminance"></a>Illuminance</h2><p>Light is produced in different amounts at different wavelengths by each light source.</p>
<h2 id="Colour-mixing"><a href="#Colour-mixing" class="headerlink" title="Colour mixing"></a>Colour mixing</h2><p>Mixing light: additive<br>e.g. a green light plus a blue light plus a red light gives light containing a broad spectrum of light, i.e. white.<br>The illumination from different light sources adds.<br>Mixing pigments: subtractive<br>e.g. a green pigment plus a blue pigment plus a red pigment gives a pigment that absorbs light over a broad spectrum, leaving black.<br>The reflection from different surfaces subtracts.</p>
<h1 id="Measuring-surface-properties"><a href="#Measuring-surface-properties" class="headerlink" title="Measuring surface properties"></a>Measuring surface properties</h1><p>The biological vision system percetives the colour of surfaces in the world, not the coulour of the light entering the eyes.<br>This is an ill-posed problem: we record L but need to recover R and don’t know E<br>$$ L(x,y,\lambda)=fn(E(x,y,\lambda),R(x,y,\lambda)) $$</p>
<ul>
<li><strong>L</strong>uminance(L) amount of light striking the sensor, depends on</li>
<li>Illuminance(E) amount of light striking the surface as well as</li>
<li><strong>R</strong>eflectance(R) which depends on material properties</li>
</ul>
<h1 id="Color-Constancy"><a href="#Color-Constancy" class="headerlink" title="Color Constancy"></a>Color Constancy</h1><h2 id="Artificial"><a href="#Artificial" class="headerlink" title="Artificial"></a>Artificial</h2><p>To recover the surface colour of a particular location,$R(x,y,\lambda))$,we need to know the colour of the illuminationn at that point, $E(x,y,\lambda))$</p>
<p>many ways of approximating E have been suggested:</p>
<ul>
<li>Average reflectance across scene is known(often fails)</li>
<li>Fixing brightest image patch to be white</li>
<li>Gamut(collection of all colours) falls within known arrange</li>
<li>Known reference colour (colour chart, skin colour)</li>
<li>Specular reflections have the colour of the illumination</li>
</ul>
<p>None of these are work particularly well</p>
<h2 id="Biological"><a href="#Biological" class="headerlink" title="Biological"></a>Biological</h2><p>However, the human visual system does seem able to recover surface colour, since despite large changes in illumination (and consequently the intensity spectrum that enters our eyes), we usually experience the colour of an object as being constant.</p>
<p>We are not normally aware of this variation because colour constancy mechanisms discount the effects of illumination, and infer the colour of the objects.</p>
<h2 id="Focusing-Light"><a href="#Focusing-Light" class="headerlink" title="Focusing Light"></a>Focusing Light</h2><p>Light spreads out from a point.<br>Without some kind of optics each location on the sensor will register light coming from many different points in the world.<br>No image will be formed.</p>
<h1 id="Optics"><a href="#Optics" class="headerlink" title="Optics"></a>Optics</h1><h2 id="Pinhole-Camera"><a href="#Pinhole-Camera" class="headerlink" title="Pinhole Camera"></a>Pinhole Camera</h2><p>Restricts the flow of light (using a small hole) so that only one ray from each point in the world reaches the sensor.</p>
<p>“Focus” means that all rays coming from a scene point converge into a single image point.<br>“Exposure” is the time needed to allow enough light through to form an image (the smaller the <strong>aperture</strong>, the longer the <strong>exposure time</strong>). The longer the <strong>exposure</strong> the more <strong>blurred</strong> an image is likely to be.</p>
<ul>
<li>mall pinhole: sharp focus but dim image (long exposure time) </li>
<li>Large pinhole: brighter image (shorter exposure) but blurred</li>
</ul>
<p>To produce an image that is both bright and in focus requires a <strong>lens</strong></p>
<h2 id="Lensed-Camera"><a href="#Lensed-Camera" class="headerlink" title="Lensed Camera"></a>Lensed Camera</h2><ul>
<li><p>With a large pinhole, light rays from the same point project to different locations on the image. The image is blurred.</p>
</li>
<li><p>By focusing rays from the same point onto a single image location, a lens can keep the image sharp while gathering more light.</p>
</li>
</ul>
<p><strong>Cost</strong>: image focused for only a <strong>restricted range</strong> of object <strong>positions</strong></p>
<h2 id="Thin-Lenses"><a href="#Thin-Lenses" class="headerlink" title="Thin Lenses"></a>Thin Lenses</h2><h2 id="Depth-of-focus"><a href="#Depth-of-focus" class="headerlink" title="Depth of focus"></a>Depth of focus</h2><h2 id="Focal-Range"><a href="#Focal-Range" class="headerlink" title="Focal Range"></a>Focal Range</h2>]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to Operations Management</title>
    <url>/2020/09/28/OPM1/</url>
    <content><![CDATA[<h1 id="Introduction-to-Operations-Management"><a href="#Introduction-to-Operations-Management" class="headerlink" title="Introduction to Operations Management"></a>Introduction to Operations Management</h1><h2 id="Components-of-an-effective-operations-manufacturing-system"><a href="#Components-of-an-effective-operations-manufacturing-system" class="headerlink" title="Components of an effective operations/manufacturing system"></a>Components of an effective operations/manufacturing system</h2><ol>
<li>educated/knowledgable(int the task at hand, of cource) and flexible workforce</li>
<li>consistent, continuous focus on quality</li>
<li>effective assets/resource management</li>
</ol>
<a id="more"></a>
<h2 id="Reasons-For-Global-Operations"><a href="#Reasons-For-Global-Operations" class="headerlink" title="Reasons For Global Operations"></a>Reasons For Global Operations</h2><ul>
<li>low labour costs, and labour law</li>
<li>access to expertise</li>
<li>access to capacity</li>
<li>specialist/subcntractors-achieve exonoies of scale</li>
<li>Access to raw material</li>
<li>tax regime</li>
<li>accessing local markets</li>
<li>quality</li>
<li>technology and assets, assets is financial(money) techinial, expert people etc.</li>
</ul>
<h2 id="Reason-Against-Global-Operations"><a href="#Reason-Against-Global-Operations" class="headerlink" title="Reason Against Global Operations"></a>Reason Against Global Operations</h2><ul>
<li>labour law</li>
<li>risks(of supply, delays, environment, tax regimes changing…)</li>
<li>loss of control of product quality</li>
<li>changes in cost structures</li>
<li>supply chain complexity</li>
<li>trade tariffs</li>
<li>loss of local expertise</li>
</ul>
<h2 id="Operations-Management-Decisions"><a href="#Operations-Management-Decisions" class="headerlink" title="Operations Management Decisions"></a>Operations Management Decisions</h2><ul>
<li>Design of products and service: what do we offer? how can we design these?</li>
<li>Quality how do we define it(i.e. policies and standards); responsibolty allocation</li>
<li>Process desingn, determining capacity requirements: our products- what do they require? what equipment and tech we will need and how much of it?</li>
<li>Location strategy/supply chain design: where we should locate new facilities(manufacturing and also distribution - e.g supermarket/warehouses etc); what are the criteria for our choices?</li>
<li>Layouts of facilities: how we could arrange the facility/its layout i.e. to maximise throughput or/and use of space: size of the facility(capacity)</li>
<li>Human reasource and job design/allocation: how to design the work environment. how much outputs whorls we expect from a given work allocation scheme?</li>
<li>Supply chain management : make or buy decision? supplier selection and order/demand allocation to suppliers(model risks)?</li>
<li>Inventory Management: how much inventory of each SKU(Stock keeping unit) we should have? when we reorder?</li>
<li>Scheduling: which jobs to perform next? Do we need overtime or how much of flexible workforce we require?</li>
<li>Maintenance: how do we embed realiablity into our processess? who is responsible?</li>
</ul>
<h2 id="Parabola-Line"><a href="#Parabola-Line" class="headerlink" title="Parabola Line"></a>Parabola Line</h2><p><strong>Example</strong><br>we have a function to descript a process of throwing a ball like this:</p>
<p>$$ h=-4.9t^2+10t+2 $$</p>
<p><strong>Questions</strong></p>
<ol>
<li>When it kicks the ground?</li>
<li>How high it goes?</li>
</ol>
<p><strong>Solutions</strong><br>Q1: </p>
<ul>
<li>h=0<blockquote>
<p>$$ -4.9t^2+10t+2=0 $$<br>$$t = \frac{-10 \pm \sqrt{10^2-4(-4.9)2}}{2(-4.9)}.$$</p>
</blockquote>
</li>
</ul>
<p>Q2:</p>
<ul>
<li>Derivation<blockquote>
<p>$$ \frac{dh}{dt} $$<br>$$ h’=-9.8t+10 $$<br>$$ h’=0, then\ t = \frac{10}{9.8} $$</p>
</blockquote>
</li>
</ul>
<p>Q1:</p>
<ul>
<li>Newton Raphson Method<blockquote>
<p>$$ x_0=init\ guess $$<br>then we try:<br>Point:$$(x,h(x_0))$$<br>A straight line: $$ y-h(x_0)=h’(x_0)(x-x_0) $$<br>then we got: $$y=0,x=x_1$$<br>$$ -h(x_0)=h’(x_0)(x_1-x_0) $$<br>$$ x_1=x_0-\frac{h(x_0)}{h’(x_0)} $$<br>$$ x_2=x_1-\frac{h(x_1)}{h’(x_1)} $$<br>$$ ……. $$</p>
</blockquote>
</li>
</ul>
<p>Q2:</p>
<ul>
<li>Gradient Descent<blockquote>
<p>$$ h’(t)=-9.8t+10 $$<br>$$ h^{‘’}(t)=-9.8 $$<br>$$ t_0=2 $$<br>$$ t_1=2- \frac{-9.8(2)+10}{-9.8}=1.02$$<br>$$ h=-4.9(1.02)^2+10(1.02)+2=7.1 $$<br>$$ …… $$</p>
</blockquote>
</li>
</ul>
<h2 id="Newton-Raphson-Method-amp-amp-Gradient-Descent"><a href="#Newton-Raphson-Method-amp-amp-Gradient-Descent" class="headerlink" title="Newton Raphson Method &amp;&amp; Gradient Descent"></a>Newton Raphson Method &amp;&amp; Gradient Descent</h2><ul>
<li>may not </li>
<li>if this guess is not good, then may never convince</li>
</ul>
<h2 id="Local-vs-Global-Optimal"><a href="#Local-vs-Global-Optimal" class="headerlink" title="Local vs Global Optimal"></a>Local vs Global Optimal</h2><ul>
<li>global maxium &amp; global minum</li>
<li>local maxium &amp; local minum</li>
</ul>
]]></content>
      <categories>
        <category>OPM</category>
      </categories>
      <tags>
        <tag>OPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Round A 2020 kick start Q1</title>
    <url>/2020/09/29/Round%20A%202020%20Q1/</url>
    <content><![CDATA[<h1 id="Round-A-2020-kick-start"><a href="#Round-A-2020-kick-start" class="headerlink" title="Round A 2020 kick start"></a>Round A 2020 kick start</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><blockquote>
<p>There are N houses for sale. The i-th house costs Ai dollars to buy. You have a budget of B dollars to spend.</p>
</blockquote>
<blockquote>
<p>What is the maximum number of houses you can buy?</p>
</blockquote>
<a id="more"></a>

<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input gives the number of test cases, T. T test cases follow. Each test case begins with a single line containing the two integers N and B. The second line contains N integers. The i-th integer is Ai, the cost of the i-th house.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the maximum number of houses you can buy.</p>
<h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h2><ul>
<li><p>Time limit: 15 seconds per test set.</p>
</li>
<li><p>Memory limit: 1GB.<br>1 ≤ T ≤ 100.<br>1 ≤ B ≤ 105.<br>1 ≤ Ai ≤ 1000, for all i.</p>
</li>
<li><p><strong>Test set 1</strong><br>1 ≤ N ≤ 100.</p>
</li>
<li><p><strong>Test set 2</strong><br>1 ≤ N ≤ 105.</p>
</li>
</ul>
<p>#Sample</p>
<ul>
<li><p><strong>Input</strong></p>
<blockquote>
<p>3<br>4 100<br>20 90 40 90<br>4 50<br>30 30 10 10<br>3 300<br>999 999 999</p>
</blockquote>
</li>
<li><p><strong>Output</strong></p>
<blockquote>
<p>Case #1: 2<br>Case #2: 3<br>Case #3: 0</p>
</blockquote>
</li>
</ul>
<p>In Sample Case #1, you have a budget of 100 dollars. You can buy the 1st and 3rd houses for 20 + 40 = 60 dollars.<br>In Sample Case #2, you have a budget of 50 dollars. You can buy the 1st, 3rd and 4th houses for 30 + 10 + 10 = 50 dollars.<br>In Sample Case #3, you have a budget of 300 dollars. You cannot buy any houses (so the answer is 0).<br>Note: Unlike previous editions, in Kick Start 2020, all test sets are visible verdict test sets, meaning you receive instant feedback upon submission.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ar array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, b, a[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a, a+n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&gt;=a[i]) &#123;</span><br><span class="line">            b-=a[i];</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, i=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        solve();</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kick start</category>
      </categories>
      <tags>
        <tag>Kick start</tag>
      </tags>
  </entry>
  <entry>
    <title>Introdution to Linear Programming</title>
    <url>/2020/10/05/OPM2/</url>
    <content><![CDATA[<h1 id="Introdution-to-Linear-Programming"><a href="#Introdution-to-Linear-Programming" class="headerlink" title="Introdution to Linear Programming"></a>Introdution to Linear Programming</h1><h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><ul>
<li><strong>Objective function</strong>: linear function,$z$, we want to optimise</li>
<li><strong>Variables</strong>: $x_j$ amounts we seek to assign values to, in order to optimise the objective function.</li>
<li><strong>Constraints</strong>: linear (in)equalities that must be satisfied by an assignment of variables<ul>
<li><strong>Non-negativity constraints</strong>: constraints of the type $x_j≥0$</li>
<li><strong>Resource constraints</strong>: the other constraints are often termed as resource constraints(or just constraints when it’s clear from the context).</li>
</ul>
</li>
<li><strong>Optimal solution</strong>: feasible point(s) at which the objective value is the largest (in case of maximisation) or smallest(in case of minimisation) among all feasible points.</li>
<li><strong>Feasible point</strong>: point $x$ is feasible for a linear program if it satisfies all its constraints.</li>
<li><strong>Feasible region</strong>: set of all feasible points of the problem.<a id="more"></a>

</li>
</ul>
<h2 id="Linear-programming"><a href="#Linear-programming" class="headerlink" title="Linear programming"></a>Linear programming</h2><p>Importantly, these problems are <strong>convex</strong>, and we use this property in Linear Programming</p>
<ul>
<li>That is, the space of feasible solutions is a convex polytope, and the optimal solution can be found by traversing the perimeter of the polytope in a systematic way.</li>
</ul>
<p>Generally, in an optimisation problem we’re trying to minimise or maximise some quantity, called the objective.<br>The objective depends on a finite number of variables.<br>The variables might be related to one another by one or several constraints.<br>In linear programming, the objective function and the constraints are of linear form.</p>
<h2 id="Questions-on-Anatomy-of-an-LP"><a href="#Questions-on-Anatomy-of-an-LP" class="headerlink" title="Questions on Anatomy of an LP"></a>Questions on Anatomy of an LP</h2><ul>
<li><p><strong>Burger Bar</strong></p>
<blockquote>
<p>A burger joint makes its burgers from a combination of some high quality meat and some cheaper meat with a higher fat content. The company keeps the precise meat sources secret but guarantees that its burgers have a fat content of less than 25%.<br>The high quality meat it uses contains 80% lean meat and 20% fat, and costs 80p per kilo. The cheaper meat contains 68% lean meat and 32% fat and costs 60p per kilo.<br>How much of each kind of meat should the burger joint use in each kilo of burger meat if it wants to <strong>minimise its cost and keep the fat content down to no more than 25%</strong>?</p>
</blockquote>
</li>
<li><p><strong>Model</strong><br>write problem in clear statement<br>convert or translate to mathmatical form</p>
<ul>
<li>Two variables<blockquote>
<p>$x_1$ :quanity (in kg) of high qulity meat to be used in 1 kilogram of burger meat<br>$x_2$ :quanity (in kg) of cheaper qulity meat to be used in 1 kilogram of burger meat</p>
</blockquote>
</li>
<li>Minimise total cost(objective function)<blockquote>
<p>min TC: $80x_1+60x_2$</p>
</blockquote>
</li>
<li>Fat contain (constraints):<blockquote>
<p>subject to:<br>$0.2x_1+0.32x_2 ≤ 0.25$<br>$x_1+x_2=1$<br>$x_1≥0$,$x_2≥0$ non-negetivity constraints/intergret constraints</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>Furniture Production</strong></p>
<blockquote>
<p>A furniture factory produces 2 type of benches using steel and wood..<br>The benches are sold to furniture shops for 3k and 1k per dozen of units of each type, respectively.<br>wood is old used for benches of type 1 and steel is used in both, and it’s required it of steel to produce a dozen of benches of type 2, while the same amounnt of benches of type 1 requires 1t of steel and also it 1t of wood. In total, the factory has 3t of steel and 2t of wood available in the next month.<br>the question facing the factory is, given the limited availability of materials, what quantity(in dozens) of each product should the company produce in the next month, in order to achieve the maximum total profit?</p>
</blockquote>
<div class="note default"><table>
<thead>
<tr>
<th>Type</th>
<th>Price(per doz)</th>
<th>Steel(per doz)</th>
<th>Wood(per doz)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>3k</td>
<td>1t</td>
<td>1t</td>
</tr>
<tr>
<td>2</td>
<td>1k</td>
<td>1t</td>
<td>0</td>
</tr>
</tbody></table>
</div>
</li>
<li><p><strong>Model</strong></p>
<ul>
<li>two variables<blockquote>
<p>x_1= number of benches of type 1(in dozens)<br>x_2= number of benches of type 2(in dozens)</p>
</blockquote>
</li>
<li>Max: $z=3x_1+x_2$</li>
<li>constraints<blockquote>
<p>subject to:<br>$x_1+x_2≤3$<br>$1x_1+0x_2≤2$<br>$x_1≥0$<br>$x_2≥0$</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>Graphical Solution</strong></p>
</li>
</ul>
<h2 id="Questions-on-live-examples"><a href="#Questions-on-live-examples" class="headerlink" title="Questions on live examples"></a>Questions on live examples</h2><h3 id="Burger-Bar"><a href="#Burger-Bar" class="headerlink" title="Burger Bar"></a>Burger Bar</h3><p>Can we take values for $x_1$ annd $x_2$ from the entire set of real number?[-infinity to +infinity ]<br>ans: no, this problem has non-negetive constraints<br><strong>Non-negativity constraints</strong><br>These are crucial constraints as they significantly restrict the solution space and help direct the solution method. Also ensure solutions selected are sensible.<br><strong>But why is that?</strong><br>Considering the production example above, not restricting the quantity $ 𝑥_j $ to be positive only is very problematic:<br>Can not produce negative amount of product</p>
<ul>
<li>If a product j is not profitable, $i.e. 𝑐_j &lt; 0$, then without the constraint the model could select a solution $𝑥_j &lt; 0$ leading to profit, $i.e. 𝑐_j𝑥_j &gt; 0$</li>
<li>A negative amount of product$j,x_j$ would imply that it does not consume any material to be produced but it rather generates… is this possible?<br>Also that would imply infinite profit driving $𝑥_j 𝑡𝑜 − ∞$</li>
</ul>
<h3 id="Mobile-phone-manufacture"><a href="#Mobile-phone-manufacture" class="headerlink" title="Mobile phone manufacture"></a>Mobile phone manufacture</h3><p>You are a manufacturer able to produce two types of mobile phone, a budget model and a high-end model, to be released in a particular region where you know the demand for these phone models.</p>
<p>For simplicity, reducing the problem scope to two dimensionns, aumme production requires just two resources to produce a phone:<br>the production lead time in minutes, and the material required.<br>Note that resources are subject to capacity constraints. Then assume 2500 minutes production lead time of in a month and 4800 units of input material.</p>
<p>The required resources per phone, the demand per month and the sales price for a phone of each model are given below:</p>
<div class="note default"><table>
<thead>
<tr>
<th></th>
<th>Prodution Lead Time</th>
<th>Material Quantity</th>
<th>Demand</th>
<th>Unite Sale Price</th>
</tr>
</thead>
<tbody><tr>
<td>Budget model</td>
<td>5</td>
<td>5</td>
<td>400</td>
<td>200</td>
</tr>
<tr>
<td>High-end model</td>
<td>7</td>
<td>17</td>
<td>270</td>
<td>400</td>
</tr>
</tbody></table>
</div>

<p>Model and solve as a linear program using the graphical method.</p>
<p>Answer can be seen in Quiz 2</p>
<h1 id="Canonical-Form"><a href="#Canonical-Form" class="headerlink" title="Canonical Form"></a>Canonical Form</h1><p>Whilst in the literature there are several variants, here we will use the form below:</p>
<p>$$ max C^TX $$<br>$$ s.t. AX = b$$<br>$$ X≥0 $$</p>
<p>Where A is an $m \times n$matrix, b is an m-dimensional vector and c, x are n-dimensional vectors.</p>
<p>Considerations:</p>
<ol>
<li>Objective function must be maximised - i.e. express as maximisation problem</li>
<li>All resource constraints must be converted to equations/equality constraints</li>
<li>All variables must be non-negative</li>
<li>All constants b must be non-negative</li>
</ol>
<h2 id="Four-Steps-of-transforming-LPs-to-a-canonical-form"><a href="#Four-Steps-of-transforming-LPs-to-a-canonical-form" class="headerlink" title="Four Steps of transforming LPs to a canonical form"></a>Four Steps of transforming LPs to a canonical form</h2><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>Let $P$ be your original linear programming problem.<br>Let $P’$ be the same problem in canonical form<br>If the objective function of $P$ if:<br>$$minimise\ C^TX$$<br>then the objective function of $P’$ will be:<br>$$maxmise -C^TX$$<br>Otherwise, objective function in $P’$ will be same as in P</p>
<h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>Given an inequality constraint in $P$ in the following form in $P’$:<br>$$\sum^n_{j=1}{a_{ij}x_j≤b_i}$$</p>
<p>replace it with the following resource and non-negativity constraints:<br>$$\sum^n_{j=1}{a_{ij}x_j+s_i=b_i}$$<br>$$s_i≥0$$</p>
<p>Similarly for ≥ constraints of the following form in $P$:<br>$$\sum^n_{j=1}{a_{ij}x_j≥b_i}$$</p>
<p>replace with the following in $P’$<br>$$\sum^n_{j=1}{a_{ij}x_j-s_i=b_i}$$<br>$$s_i≥0$$</p>
<p>Any other resource constraint that is already annequality is just transfered to $P’$ as-is.</p>
<h3 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h3><p>All resource constraints in $P’$ are now convereted to equality constraints with the respective slach or surplus variables added.</p>
<p>Next, we need to make sure that the right hand side (RHS)of all constrainnts is non-negative. To do this, any constraint where $b_i&lt;0$, mutiply by -1 on both sides and throughout to obtain:<br>$$-\sum^n_{j=1}{a_{ij}x_j+s_i=-b_i}$$</p>
<h3 id="step-4"><a href="#step-4" class="headerlink" title="step 4"></a>step 4</h3><p>Finally, replace any unconstraint variable in sign $x_j$, with $x^+_j-x^-_j$, and we require that these are non-negative by adding the relevant constraints $x^+_j≥0$ and $x^-_j≥0$ to $P’$.<br>Afterwards we have to go back to $x_j=x^+_j-x^-_j$ to find the value of $x_j$!</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>LP:<br>$$min 3x_1+2x_2$$<br>$$ s.t. 2x_1≤3$$<br>$$ 5x_1+2x_2≥-27$$<br>$$ x_1≥0$$</p>
<ul>
<li>change minimisation to maximisation</li>
<li>change ≥ and ≤ constraints to = and add surplus or slack variables.</li>
</ul>
<p>$$max -3x_1-2x_2$$<br>$$ s.t. 2x_1+s_1=3$$<br>$$ 5x_1+2x_2-s_2=-27$$<br>$$ x_1≥0$$<br>$$ s_1≥0$$<br>$$ s_2≥0$$</p>
<ul>
<li>make bounds positive</li>
</ul>
<p>$$max -3x_1-2x_2$$<br>$$ s.t. 2x_1+s_1=3$$<br>$$ -5x_1-2x_2+s_2=+27$$<br>$$ x_1≥0$$<br>$$ s_1≥0$$<br>$$ s_2≥0$$</p>
<ul>
<li>remove unrestricted variables</li>
</ul>
<p>$$max -3x_1-2x^+_2+2x^-_2$$<br>$$ s.t. 2x_1+s_1=3$$<br>$$ -5x_1-2x^+_2+2x^-_2+s_2=+27$$<br>$$ x_1≥0$$<br>$$ x^+_2≥0$$<br>$$ x^-_2≥0$$<br>$$ s_1≥0$$<br>$$ s_2≥0$$</p>
<h1 id="Some-further-definitions"><a href="#Some-further-definitions" class="headerlink" title="Some further definitions"></a>Some further definitions</h1><h2 id="Feasibility"><a href="#Feasibility" class="headerlink" title="Feasibility"></a>Feasibility</h2><p>A point x is feasible for a given LP if it satisfies all its constraints<br>The feasible region for that LP is the set of all its feasible points.<br>An LP is infeasible if its feasibility set is empty; otherwise, it is feasible.<br>An LP is unbounded if it is feasible but its objective function can be made arbitrarily “good”.<br>• For example, if an LP is a minimisation problem and unbounded, then its objective value can be made arbitrarily small while<br>maintaining feasibility. In other words, we can drive the objective value to negative infinity within the feasibility set. Similarly for an unbounded maximisation problem where we can drive the objective value to positive infinity.<br>A linear program is unbounded only if its feasibility set is an unbounded set. However, an unbounded feasibility set does not necessarily imply that the linear program itself is unbounded (sufficient but not necessary condition).</p>
<h2 id="What-is-an-Optimal-Solution"><a href="#What-is-an-Optimal-Solution" class="headerlink" title="What is an Optimal Solution?"></a>What is an Optimal Solution?</h2><p>An assignment of variables that satisfies all the constraints and optimises the objective function is called an optimal solution.<br>• Given a maximisation LP problem, an optimal solution for the LP is a feasible point<br>whose value is the largest possible among all feasible points.<br>• Given a minimisation LP problem, an optimal solution for the LP is a feasible point<br>whose value is the smallest possible among all feasible points.</p>
<h2 id="Possible-outcomes-of-a-LP"><a href="#Possible-outcomes-of-a-LP" class="headerlink" title="Possible outcomes of a LP"></a>Possible outcomes of a LP</h2><p>For any given linear program there are three possibilities:</p>
<ol>
<li>The linear program is infeasible: the feasible region is empty (there is no feasible solution), and so there is no optimal solution.</li>
<li>The linear program is feasible but the objective is unbounded: the feasible region is an unbounded set, but there is no optimal solution.</li>
<li>The linear program is feasible and has an optimal solution x* (unique or multiple) within its feasible region: the feasibility set can be either unbounded or bounded.</li>
</ol>
<h1 id="Install-LP-solve"><a href="#Install-LP-solve" class="headerlink" title="Install LP-solve"></a>Install LP-solve</h1><p><a href="http://sites.math.washington.edu/~conroy/m381-general/lpsolveHowToMac/lpsolveMacHow.html">Steps to install and run lpsolve on a Mac
</a></p>
]]></content>
      <categories>
        <category>OPM</category>
      </categories>
      <tags>
        <tag>OPM</tag>
      </tags>
  </entry>
  <entry>
    <title>biweekly contest 36</title>
    <url>/2020/10/03/biweekly%20contest%2036/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>一共四题，1题easy，2题medium，1题hard<br>第一道，简单的系统设计题，要清楚object function；<br>第二道，同样应用题，但是通过率不高；<br>第三道，给出制定行和&amp;列和的矩阵；<br>第四道，</p>
<ul>
<li>Design Parking System</li>
<li>Alert Using Same Key-Card Three or More Times in a One Hour Period</li>
<li>Find Valid Matrix Given Row and Column Sums</li>
<li>Find Servers That Handled Most Number of Requests<a id="more"></a>
<h1 id="Design-Parking-System"><a href="#Design-Parking-System" class="headerlink" title="Design Parking System"></a>Design Parking System</h1><a href="https://leetcode.com/contest/biweekly-contest-36/problems/design-parking-system/">原题链接</a></li>
</ul>
<p>解法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkingSystem</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ps;</span><br><span class="line">    ParkingSystem(<span class="keyword">int</span> big, <span class="keyword">int</span> medium, <span class="keyword">int</span> small) &#123;</span><br><span class="line">        ps.push_back(big);</span><br><span class="line">        ps.push_back(medium);</span><br><span class="line">        ps.push_back(small);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addCar</span><span class="params">(<span class="keyword">int</span> carType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ps[carType<span class="number">-1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ps[carType<span class="number">-1</span>]--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Alert-Using-Same-Key-Card-Three-or-More-Times-in-a-One-Hour-Period"><a href="#Alert-Using-Same-Key-Card-Three-or-More-Times-in-a-One-Hour-Period" class="headerlink" title="Alert Using Same Key-Card Three or More Times in a One Hour Period"></a>Alert Using Same Key-Card Three or More Times in a One Hour Period</h1><p><a href="https://leetcode.com/contest/biweekly-contest-36/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period/">原题链接</a><br>解法：</p>
<h1 id="Find-Valid-Matrix-Given-Row-and-Column-Sums"><a href="#Find-Valid-Matrix-Given-Row-and-Column-Sums" class="headerlink" title="Find Valid Matrix Given Row and Column Sums"></a>Find Valid Matrix Given Row and Column Sums</h1><p><a href="https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/">原题链接</a><br>解法：Greedy</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">restoreMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = row.size(), n = col.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">A</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n; ++j) &#123;</span><br><span class="line">                A[i][j] = min(row[i], col[j]);</span><br><span class="line">                row[i] -= A[i][j];</span><br><span class="line">                col[j] -= A[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Time: O(mn)<br>Space: O(mn)</p>
<h1 id="Find-Servers-That-Handled-Most-Number-of-Requests"><a href="#Find-Servers-That-Handled-Most-Number-of-Requests" class="headerlink" title="Find Servers That Handled Most Number of Requests"></a>Find Servers That Handled Most Number of Requests</h1><p><a href="https://leetcode.com/contest/biweekly-contest-36/problems/find-servers-that-handled-most-number-of-requests/">原题链接</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Union Find</title>
    <url>/2020/09/27/algorithm1/</url>
    <content><![CDATA[<ul>
<li>Algorithm: method for solving a problem</li>
<li>Data structure: method to store information</li>
</ul>
<h1 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h1><ul>
<li>model the problem</li>
<li>find an algorithm to solve it</li>
<li>fast enough? fits in memory</li>
<li>if not figure out why</li>
<li>find a way to address the problem</li>
<li>iterate until satisfied</li>
</ul>
<a id="more"></a>
<h2 id="Dynamic-Connectivity"><a href="#Dynamic-Connectivity" class="headerlink" title="Dynamic Connectivity"></a>Dynamic Connectivity</h2><p><strong>modeling the objects</strong><br>When programming, convenient to name objects 0 to N-1</p>
<ul>
<li>use integers as array index</li>
<li>suppress details not relevant to union-find.</li>
</ul>
<p><strong>modeling the connections</strong><br>We assume “is connected to” is an equivalence relation:</p>
<ul>
<li>Reflexive:p is connected to p</li>
<li>Symmetric: if p is connected to q, then q is connected to p</li>
<li>Transitive: if p is connected to q and q is connected to r, then p is connected to r</li>
</ul>
<p>Connected components<br>maximal set of objects that are mutually connected</p>
<p><strong>Implementing the operations</strong><br>Find query</p>
<ul>
<li>check if two objects are in the same component<br>Union command</li>
<li>Replace components containing two objects with their union</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Greedy</title>
    <url>/2020/10/04/greedy/</url>
    <content><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，做出的是某种意义上的局部最优解。</p>
<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><ul>
<li>建立数学模型来描述问题；</li>
<li>把求解的问题分成若干个子问题；</li>
<li>对每个子问题求解，得到子问题的局部最优解；</li>
<li>把子问题的解局部最优解合成原来解问题的一个解。<a id="more"></a>

</li>
</ul>
<h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><ul>
<li>贪心的选择<ul>
<li>仅仅依据当前已有的信息做出选择，并且以后都不会改变这次选择。（区别与动态规划）</li>
</ul>
</li>
<li>最优子结构<ul>
<li>当一个问题的最优解包括其子问题的最优解时，称此问题具有最优子结构性质。</li>
<li>这个性质和动态规划的一样，最优子结构性质是可用动态规划算法或贪心算法求解的关键特征。</li>
</ul>
</li>
</ul>
<h1 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h1><ul>
<li>背包问题</li>
<li>Huffman编码</li>
<li>单源最短路径</li>
<li>prim算法</li>
<li>kruskal算法</li>
</ul>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Math Quiz 1</title>
    <url>/2020/09/30/math1/</url>
    <content><![CDATA[<h1 id="问题一-集卡片"><a href="#问题一-集卡片" class="headerlink" title="问题一 集卡片"></a>问题一 集卡片</h1><p>有n张卡片，每次等概率随机获取1张，问期望多少张卡片可以将所有卡片集齐？<br><strong>Ans</strong><br>$$ \frac{n}{n}+\frac{n}{n-1}+\frac{n}{n-2}+.….+\frac{n}{1}= \sum^n_{i=1}{\frac{n}{i}}$$<br>注：离散随机变量的一切可能值与其对应的概率P的乘积之和称为数学期望</p>
<a id="more"></a>
<h1 id="问题二-随机数生成器"><a href="#问题二-随机数生成器" class="headerlink" title="问题二 随机数生成器"></a>问题二 随机数生成器</h1><p>你有一个不均匀的随机数生成器，0的概率为p，1的概率为1-p，p未知。<br>设计一个算法，用这个不均匀的随机数生成器生成一个均匀的随机数生成器，即生成0和1的概率均为$\frac{1}{2}$。<br><strong>Ans</strong><br>我们每次用不均匀的随机数生成器依次生成2个数，如果是00和11，我们忽略，然后继续生成2个数，直到生成01和10为止。<br>如果生成01，我们输出0；如果生成10，我们输出1。这两种情况概率均为p(1-p)</p>
<h1 id="问题三-完全信息的结婚问题"><a href="#问题三-完全信息的结婚问题" class="headerlink" title="问题三 完全信息的结婚问题"></a>问题三 完全信息的结婚问题</h1><p>有n次找男友的机会，每个男友给你的满意度是1,2,…,m中等概率随机的一个数<br>你从1到n换男友，只有成为男友才能知道男友给你的满意度，换了男友后不能再找回来<br>那你可以再任意的时候选择和当前的男友结婚，该男友的满意度就是你最终的辛福指数。<br>假设你足够渣，求你期望能获得的辛福指数。<br>$$n,m≤10^7$$<br><strong>Ans</strong><br>令$f_i$表示你还有i次找女友的机会时的期望幸福指数<br>$f_1=\frac{1+m}{2}$<br>$f_i=\frac{\sum^m_{i=1}max({f_{i-1},i})}{m}$<br>选择i，继续碰运气，选择$f_{i-1}$，结婚; 时间复杂度O(n)。</p>
<h1 id="问题四-不完全信息的结婚问题"><a href="#问题四-不完全信息的结婚问题" class="headerlink" title="问题四 不完全信息的结婚问题"></a>问题四 不完全信息的结婚问题</h1><p>有n次找男友的机会，每个男友给你的满意度未知（但是满足随机分布）<br>你从1到n换男友，只有成为男友才能知道男友给你的满意度，换了男友后不能再找回来<br>那你可以再任意的时候选择和当前的男友结婚，该男友的满意度就是你最终的辛福指数。<br>你需要采用一种策略，使得你找到最好的男友结婚的概率最大。<br><strong>Ans</strong><br>n=3时的最优策略？<br>第一个男友先pass，当第二个男友比第一个要好时，选择结婚；反之选择下一个。<br>一共有6种情况：</p>
<blockquote>
<p>123 没找到<br>132 找到<br>213 找到<br>231 找到<br>312 没找到<br>321 没找到</p>
</blockquote>
<p>概率为$\frac{1}{2}$<br>策略：先观察前k个男友，然后全部分手。对剩下的女友如果比前k个女友都好，就结婚。<br>$$ P(k)= \frac{1}{n}+\frac{1}{n}\times\frac{k}{k+1}+\frac{1}{n}\times\frac{k}{k+2}+…+\frac{1}{n}\times\frac{k}{n-1}=\frac{k}{n}\sum^{n-1}_{i=k}\frac{1}{i} $$</p>
<p>令$k=\frac{k}{n}$,得$P(k)=\frac{k}{n}\sum^{n-1}_{i=k}\frac{1}{i}=x\int^1_x\frac{1}{x}dt=-xlnx$</p>
<p>$P’(k)=-(1+lnx)=0$,有$x=\frac{1}{e}=37$%</p>
<p>此时，$P(k)=-\frac{1}{e}ln\frac{1}{e}=\frac{1}{e}=37$%</p>
<p>最佳策略：先观察37%的男友，然后全部分手，接下来，一旦遇到一个比前面男友都要好的，直接结婚。如果你找男友的时期时15-35岁，那么22之前就是观察期，不要结婚，接下来遇到更好的直接结婚。</p>
<h1 id="问题五-最大间距"><a href="#问题五-最大间距" class="headerlink" title="问题五 最大间距"></a>问题五 最大间距</h1><p>有n个乱序数$\alpha_1,…,\alpha_n$，求排序之后，相邻元素之间的最大差值<br>$n≤10^7,1≤\alpha_1,…,\alpha_n≤10^{18}$<br>要求O(n)<br><strong>Ans</strong><br>把n个数放在n+1个桶里，其中最小值min放在第1个桶，最大值max放在第n+1个桶，每个桶都负责放$gap=\frac{max-min}{n+1}$范围的数字<br>根据鸽笼原理，必然有一个空桶。同一个桶内的差值必然小于gap，而间隔一个空桶的差值必然大于gap，故我们不用考虑一个桶内的差值，只需要考虑不同桶之间的差值。<br>记录每个桶中的最大值和最小值，遍历桶，依次用当前桶的最小值减去上一个非空桶的最大值判断即可。</p>
]]></content>
      <categories>
        <category>ACM&amp;C++</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>ACM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Slide Window</title>
    <url>/2020/10/04/slidewindow/</url>
    <content><![CDATA[<h1 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h1><p>该算法是通过使用特定大小的子列表，在遍历完整列表的同时进行特定的操作，以达到降低了循环的嵌套深度。</p>
<a id="more"></a>

<h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><img src="/2020/10/04/slidewindow/1.jpg" width="450" height="400">

<h2 id="经典使用"><a href="#经典使用" class="headerlink" title="经典使用"></a>经典使用</h2><ul>
<li><p>连续元素最大和</p>
<blockquote>
<p>给定数据，获取数据中n个连续元素，最大的和。<br>input ：[-3,3,1,-3,2,4,7] n=3<br>output : 13</p>
</blockquote>
</li>
<li><p>Brute Force</p>
</li>
<li><p>Slide Window</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSum</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// Initialize result </span></span><br><span class="line">    <span class="keyword">int</span> max_sum = INT_MIN; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Consider all blocks starting with i. </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; i++) &#123; </span><br><span class="line">        <span class="keyword">int</span> current_sum = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) </span><br><span class="line">            current_sum = current_sum + arr[i + j]; </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Update result if required. </span></span><br><span class="line">        max_sum = max(current_sum, max_sum); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max_sum; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>最长无重复子字符串</p>
<blockquote>
<p>给定字符串，计算最长子字符串的长度，该子字符串满足如下条件：</p>
<ol>
<li>是给定字符串的字符串</li>
<li>子字符串中无重复字符<br>input：”abcabcbb”<br>output: 3</li>
</ol>
</blockquote>
</li>
</ul>
<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">原题链接</a></p>
<ul>
<li><p>Brute Force</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(allUnique(s,i,j)) ans=max(ans,j-i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">allUnique</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; seen;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;end; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch=s[i];</span><br><span class="line">            <span class="keyword">if</span>(seen.count(ch))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            seen.insert(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>slide window</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">         <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; index;</span><br><span class="line">         index.assign(<span class="number">128</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// current index of character</span></span><br><span class="line">        <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = max(index[s[j]], i);</span><br><span class="line">            ans = max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            index[s[j]] = j + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="other-problem"><a href="#other-problem" class="headerlink" title="other problem"></a>other problem</h3><p>when server is not running</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof -i :4000</span><br><span class="line">$ <span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure>

<h2 id="How-to-insert-a-mathjax-code"><a href="#How-to-insert-a-mathjax-code" class="headerlink" title="How to insert a mathjax code"></a>How to insert a mathjax code</h2><p>More info: <a href="https://www.jianshu.com/p/a0aa94ef8ab2">mathjax code</a></p>
<h2 id="How-to-insert-a-img-pdf-video"><a href="#How-to-insert-a-img-pdf-video" class="headerlink" title="How to insert a img/pdf/video"></a>How to insert a img/pdf/video</h2><p>More info: <a href="https://hexo.io/docs/tag-plugins#Include-Assets">insert media</a></p>
<h2 id="About-more-button"><a href="#About-more-button" class="headerlink" title="About more button"></a>About more button</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>weekly contest 208</title>
    <url>/2020/09/27/weekly%20contest%20208/</url>
    <content><![CDATA[<h1 id="写作前面"><a href="#写作前面" class="headerlink" title="写作前面"></a>写作前面</h1><p>主要四道题目，1道easy，1道medium，2道hard。<br>其中前两道题干略长，需要理解，但写出来并不复杂，难在理解题意；<br>后两道略偏数据结构和算法。<br>主要题目如下：</p>
<ul>
<li>Crawler log folder</li>
<li>Maximum Profit of Operating a Centennial Wheel</li>
<li>Throne Inheritance</li>
<li>Maximum Number of Achievable Transfer Requests<a id="more"></a>

</li>
</ul>
<h1 id="Crawler-log-folder"><a href="#Crawler-log-folder" class="headerlink" title="Crawler log folder"></a>Crawler log folder</h1><p><a href="https://leetcode.com/contest/weekly-contest-208/problems/crawler-log-folder/">原题链接</a></p>
<p>Easy</p>
<p>解答：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; logs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">string</span> s: logs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="string">&quot;../&quot;</span>)&#123;<span class="keyword">if</span>(res&gt;<span class="number">0</span>)res--;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;./&quot;</span>)&#123;</span><br><span class="line">                res=res;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;res++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res&gt;=<span class="number">0</span>? res:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Maximum-Profit-of-Operating-a-Centennial-Wheel"><a href="#Maximum-Profit-of-Operating-a-Centennial-Wheel" class="headerlink" title="Maximum Profit of Operating a Centennial Wheel"></a>Maximum Profit of Operating a Centennial Wheel</h1><p><a href="https://leetcode.com/contest/weekly-contest-208/problems/maximum-profit-of-operating-a-centennial-wheel/">原题链接</a></p>
<p>Medium</p>
<p>解答：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperationsMaxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; customers, <span class="keyword">int</span> boardingCost, <span class="keyword">int</span> runningCost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxProfit = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> min=<span class="number">0</span>, i=<span class="number">0</span>, remaining= customers[i];</span><br><span class="line">        <span class="keyword">int</span> totalboarded=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> board = remaining&gt;<span class="number">3</span>? <span class="number">4</span>:remaining;</span><br><span class="line">            remaining-= board;</span><br><span class="line">            totalboarded+=board;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;customers.size())&#123;</span><br><span class="line">                remaining +=customers[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> currentProfit=(totalboarded*boardingCost)-(i*runningCost);</span><br><span class="line">            <span class="keyword">if</span>(currentProfit&gt;maxProfit)&#123;</span><br><span class="line">                min=i;</span><br><span class="line">            &#125;</span><br><span class="line">            maxProfit=max(maxProfit,(totalboarded*boardingCost)-(i*runningCost));</span><br><span class="line">            <span class="keyword">if</span>(remaining==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit&lt;=<span class="number">0</span>? <span class="number">-1</span>:min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Throne-Inheritance"><a href="#Throne-Inheritance" class="headerlink" title="Throne Inheritance"></a>Throne Inheritance</h1><p><a href>原题链接</a></p>
<h1 id="Maximum-Number-of-Achievable-Transfer-Requests"><a href="#Maximum-Number-of-Achievable-Transfer-Requests" class="headerlink" title="Maximum Number of Achievable Transfer Requests"></a>Maximum Number of Achievable Transfer Requests</h1><p><a href>原题链接</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>karnaugh map</title>
    <url>/2020/10/02/%E5%8D%A1%E8%AF%BA%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="卡诺图-karnaugh-map"><a href="#卡诺图-karnaugh-map" class="headerlink" title="卡诺图 karnaugh map"></a>卡诺图 karnaugh map</h1><p>卡诺图是由美国工程师karnaugh首先提出的一种用来描述逻辑函数的特殊方格图。<br>在这个方格图中，每个方格代表逻辑函数的一个最小项，而且几何相邻（在几何位置上，上下或左右相邻）的小方格具有逻辑相邻性，即两相邻小方格代表的最小项只有一个变量取值不同。</p>
<p>对于有n个变量的逻辑函数，其最小项有$2^n$个。<br>因此该逻辑函数的卡诺图又$2^n$个小方格构成，每个小方格都满足逻辑相邻项的要求。<br>可以运用于逻辑函数的化简。</p>
<a id="more"></a>


<ul>
<li>例子</li>
<li>画出逻辑函数的卡诺图</li>
<li>$F(A,B,C,D)= \sum {m(0,1,2,5,7,8,10,11,14,15)}$</li>
</ul>
<img src="/2020/10/02/卡诺图/1.jpg" title="karnaugh map" width="250" height="200">

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="二灯游戏"><a href="#二灯游戏" class="headerlink" title="二灯游戏"></a>二灯游戏</h2><p>一个游戏机有两个灯，一黄一绿，它们忽闪忽灭，你必须在出现以下情况的时候迅速按下游戏机：</p>
<ul>
<li>绿灯灭，黄灯亮</li>
<li>绿灯、黄灯都灭</li>
<li>绿灯、黄灯都亮</li>
</ul>
<p>解题思路：</p>
<ol>
<li>首先定义两个基本的命题</li>
</ol>
<ul>
<li>命题A：绿灯亮</li>
<li>命题B：黄灯亮</li>
</ul>
<ol start="2">
<li>画出卡诺图</li>
</ol>
<img src="/2020/10/02/卡诺图/2.jpg" width="250" height="200">

<ul>
<li>A为绿灯，0和1分别表示该灯的状态；</li>
<li>B为黄灯，同理。</li>
</ul>
<blockquote>
<p>根据游戏规则的3种情况，分别对应卡诺图种的：00、01、11<br>根据卡诺图每格具备相邻性的特点，使用1<em>1、1</em>2、2<em>2、4</em>4的网格圈出（仅能使用2^n个格子去圈）</p>
</blockquote>
<img src="/2020/10/02/卡诺图/3.jpg" width="250" height="200">

<ol start="3">
<li>卡诺图化简</li>
</ol>
<blockquote>
<p>根据上图得出式子：(~A~B+ ~AB) + （~AB+AB）= ~A + B  （~A表示A反）<br>由此得出只要满足 ~AV(V表示或)B ，即绿灯灭 或者 黄灯亮即可按下按钮。</p>
</blockquote>
<h2 id="三灯游戏"><a href="#三灯游戏" class="headerlink" title="三灯游戏"></a>三灯游戏</h2><p>将上述游戏进行升级，存在3种灯（绿灯、黄灯、红灯）的情况下，符合如下规则即可按下按钮：</p>
<ul>
<li>3灯都灭</li>
<li>黄灯灭、红灯亮</li>
<li>绿灯灭、黄灯亮</li>
<li>3灯都亮</li>
</ul>
<p>解题思路：</p>
<ol>
<li>定义命题<br>命题A：绿灯亮<br>命题B：黄灯亮<br>命题C：红灯亮</li>
<li>画出卡诺图，并将上述情况在卡诺图中用1来代替原先的二进制</li>
</ol>
<img src="/2020/10/02/卡诺图/4.jpg" width="450" height="300">

<blockquote>
<p>上图将4个规则在卡诺图中对应出来。</p>
</blockquote>
<ol start="3">
<li>卡诺图化简</li>
</ol>
<blockquote>
<p>根据卡诺图每格具备相邻性的特点，进行如下的画圈：</p>
</blockquote>
<img src="/2020/10/02/卡诺图/5.jpg" width="250" height="200">

<blockquote>
<p>因此可得式子：(~A~B~C+A~B~C+A~BC+A~B~C) + (~A~BC+~ABC+A~BC+ABC)<br>= (~A~B+A~B) + (~AC+AC)<br>= ~A+C<br>化简后获得 ~A+C</p>
</blockquote>
]]></content>
      <categories>
        <category>ACM&amp;C++</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习</title>
    <url>/2020/09/26/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h1><blockquote>
<p>如果一个系统能够通过执行某个过程改进它的性能，这就是学习。——赫尔伯特·西蒙</p>
</blockquote>
<h2 id="统计学习的特点"><a href="#统计学习的特点" class="headerlink" title="统计学习的特点"></a>统计学习的特点</h2><h4 id="统计学习定义"><a href="#统计学习定义" class="headerlink" title="统计学习定义"></a>统计学习定义</h4><p>统计学习是关于计算机基于数据构建概率统计模型并运用模型对数据进行预测和分析的一门学科。<br>统计学习也可以称为统计机器学习。</p>
<h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ul>
<li>统计学习以计算机及网络为平台，是建立在计算机及网络上的；</li>
<li>统计学习以数据为研究对象，是数据驱动的学科；</li>
<li>统计学习的目的是对数据进行预测与分析；</li>
<li>统计学习以方法为中心，统计学习方法构建模型并应用模型进行预测与分析；</li>
<li>统计学习是概率论、统计学、信息论、计算理论、最优化理论及计算机科学等许多领域的交叉学科，并且在发展中逐步形成独自的理论体系与方法论。<a id="more"></a>
<h2 id="统计学习的对象"><a href="#统计学习的对象" class="headerlink" title="统计学习的对象"></a>统计学习的对象</h2></li>
</ul>
<p>统计学习研究的对象是data。它从数据出发，提取数据的特征，抽象出数据的模型，发现数据中的知识，又回到对数据的分析与预测中去。注意这里的数据是多样的，可是是计算机及网络上的各种数字、文字、图像、视频、音频数据以及它们的组合。</p>
<p>统计学习关于数据的基本假设是<strong>同类数据具有一定的统计规律性</strong>，这是统计学习的前提。</p>
<h2 id="统计学习的目的"><a href="#统计学习的目的" class="headerlink" title="统计学习的目的"></a>统计学习的目的</h2><p>统计学习用于对数据的预测与分析，特别是对未知新数据的预测与分析。对数据的预测可以使计算机更加智能化，或者说使计算机的某些性能得到提高；对数据的分析可以让人们获取新的知识，给人们带来新的发现。</p>
<p>对数据的预测与分析是通过构建概率统计模型实现的。统计学习总的目标就是考虑学习什么样的模型和如何学习模型，以使模型能对数据进行准确的预测与分析，同时也要考虑尽可能地提高学习效率。</p>
<h2 id="统计学习的方法"><a href="#统计学习的方法" class="headerlink" title="统计学习的方法"></a>统计学习的方法</h2><p>统计学习的方法是基于数据构建概率统计模型从而对数据进行预测与分析。统计学习由监督学习、无监督学习和强化学习等组成。</p>
<p>统计学习的方法可以概括如下：</p>
<ul>
<li>从给定的、有限的、用于学习的训练数据集合出发，假设数据是独立同分布产生的；</li>
<li>并且假设要学习的模型属于某个函数的集合，称为假设空间；</li>
<li>应用某个评价准则，从假设空间中选取一个最优模型，使它对已知的训练数据以及位置的测试数据在给定的评价准则下有最优的预测；</li>
<li>最优模型的选择由算法实现。</li>
</ul>
<p>这样，统计学习方法包括模型的假设空间、模型选择的准则以及模型学习的算法。称为统计学习方法的三要素，简称为<strong>“模型”</strong>、<strong>“策略”</strong>和<strong>“算法”</strong>。</p>
<p>实现统计学习方法的步骤如下：</p>
<ol>
<li>得到一个有限的训练数据集合；</li>
<li>确定包含所有可能的模型的假设空间，即学习模型的集合；</li>
<li>确定模型选择的准则，即学习的策略；</li>
<li>实现求解最优模型的算法，即学习的算法；</li>
<li>通过学习方法选择最优模型；</li>
<li>利用学习的最优模型对新数据进行预测或分析。</li>
</ol>
<h2 id="统计学习的研究"><a href="#统计学习的研究" class="headerlink" title="统计学习的研究"></a>统计学习的研究</h2><p>统计学习的研究一般包括统计学习方法、统计学习理论以及统计学习应用三个方面。<br>统计学习<strong>方法</strong>的研究旨在开发<strong>新的学习方法</strong>；<br>统计学习<strong>理论</strong>的研究在于<strong>探求统计学习方法的有效性与效率，以及统计学习的基本理论问题</strong>；<br>统计学习<strong>应用</strong>的研究主要考虑<strong>将统计学习方法应用到实际问题中去，解决实际问题</strong>。</p>
<h2 id="统计学习的重要性"><a href="#统计学习的重要性" class="headerlink" title="统计学习的重要性"></a>统计学习的重要性</h2><p>统计学习学科在科学技术中的重要性主要体现在以下几个方面：</p>
<ul>
<li>统计学习是处理海量数据的有效方法。</li>
<li>统计学习是计算机智能化的有效手段。</li>
<li>统计学习是计算机科学发展的一个重要组成部分。</li>
</ul>
]]></content>
      <categories>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法三要素</title>
    <url>/2020/10/05/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E4%B8%89%E8%A6%81%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="统计学习方法三要素"><a href="#统计学习方法三要素" class="headerlink" title="统计学习方法三要素"></a>统计学习方法三要素</h1><blockquote>
<p>统计学习方法都是由模型、策略和算法构成的，即统计学习方法由三要素构成，可以简单地表示为：<br>$$方法=模型+策略+算法$$</p>
</blockquote>
<a id="more"></a>

<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>统计学习首要考虑的问题是学习什么样的模型。<br>在监督学习过程中，模型就是所要学习的条件概率分布或者决策函数。<br>模型的假设空间包含所有可能的条件概率分布或决策函数。<br>例如，假设决策函数是输入变量的线性函数，那么模型的假设空间就是这些线性函数构成的函数集合。<br>假设空间中的模型一般有无穷多个。<br>假设空间用F表示，假设空间可以定义为决策函数的集合：<br>$$F={f|Y=f(X)}$$<br>其中，X和Y是定义在输入空间X和输出空间Y上的变量，这时F通常是由一个参数向量决定的函数族：</p>
<h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>算法是指学习模型的具体计算方法。<br>统计学习基于训练数据集，根据学习策略，从假设空间中选择最优模型，最后需要考虑用什么样的计算方法求解最优模型。<br>这时，统计学习问题归结为最优化问题，统计学习的算法成为求解最优化问题的算法。<br>如果最优化问题有显式的解析式，这个最优化问题就比较简单。<br>但是通常解析解不存在，这就需要用数值计算的方法求解。<br>如何保证找到全局最优解，并使求解的过程非常高效，就成为一个重要问题。</p>
]]></content>
      <categories>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>西瓜书——基本术语</title>
    <url>/2020/09/28/%E8%A5%BF%E7%93%9C%E4%B9%A6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h1><blockquote>
<p>在计算机系统中，“经验”通常以“数据”形式存在，因此，机器学习所研究的主要内容，是关于在计算机上从数据中产生“模型”的算法，即“学习算法”（learning algorithm）。</p>
</blockquote>
<p><strong>以西瓜的例子开始，学习过程为像人一样判断和分别西瓜；</strong></p>
<a id="more"></a>

<h2 id="输入空间"><a href="#输入空间" class="headerlink" title="输入空间"></a>输入空间</h2><ul>
<li><strong>Data set</strong><ul>
<li>假设我们有了一组西瓜的数据，例如「色泽=浅白；根蒂=硬挺；敲声=清脆」，被记录的数据组成了“数据集”。</li>
</ul>
</li>
<li><strong>Instance</strong><ul>
<li>其中每个事件或者对象（这里是每个西瓜）的描述，称为“示例”，也可以叫sample。</li>
</ul>
</li>
<li><strong>Attribute</strong><ul>
<li>里面的“色泽”，“根蒂”，“敲声”称为“属性”，也可以叫feature。</li>
</ul>
</li>
<li><strong>Attribute value</strong><ul>
<li>属性上的取值，如“浅白”，“清脆”，称为”属性值“。</li>
</ul>
</li>
<li><strong>Attribute space</strong><ul>
<li>属性张成的空间称为“属性空间”，也可以叫sample space或者input space。</li>
</ul>
</li>
<li><strong>Feature vector</strong><ul>
<li>例如我们把“色泽”，“根蒂”，“敲声”作为三个坐标轴，用它们张成的空间来描述西瓜；</li>
<li>那么每个西瓜都可以在这个空间中找到自己的坐标位置；</li>
<li>由于空间中每个点对应一个坐标向量，<strong>因此我们也把一个示例叫做一个特征向量feature vector</strong>。</li>
</ul>
</li>
</ul>
<h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><ul>
<li><p><strong>training data&amp;training set</strong></p>
<ul>
<li>从数据中学得模型的过程称为learning或者training，这个过程通过执行某个学习算法来完成；</li>
<li>训练过程中使用的数据称为“训练数据”，其中每个样本被称为“训练样本”，由训练样本组成的集合为“训练集”。</li>
</ul>
</li>
<li><p><strong>hypothesis&amp;ground-truth</strong></p>
<ul>
<li>学得的模型对应了关于数据的某种潜在规律，因此亦称为“假设”；</li>
<li>这种潜在规律的本身称为“真相”；</li>
<li>学习过程就是为了找出或者逼近真相。</li>
</ul>
</li>
<li><p><strong>prediction&amp;label&amp;exampe</strong></p>
<blockquote>
<p>如果希望学得一个能帮助我们判断没剖开的是不是“好瓜”的模型，仅仅有前面的示例数据显然是不够的。<br>要建立这样的“预测”模型，我们需获得训练样本的“结果信息”，例如（「色泽=青绿；根蒂=蜷缩；敲声=浑浊」，好瓜）。<br>这里的“好瓜”称为“标记”，拥有了标记信息的示例，称为样例example。</p>
</blockquote>
</li>
<li><p><strong>label space</strong></p>
<ul>
<li>标记可以取值的空间称为“标记空间”，也称为“输出空间”。</li>
</ul>
</li>
<li><p><strong>分类&amp;回归</strong></p>
<blockquote>
<p>若我们欲预测的是<strong>离散值</strong>，例如“好瓜”“坏瓜”，此类学习任务称为“分类”；<br>若欲预测的是<strong>连续值</strong>，例如西瓜成熟度0.95、0.37，此类学习任务称为“回归”。</p>
</blockquote>
</li>
<li><p><strong>二分类&amp;多分类</strong></p>
<blockquote>
<p>“二分类”任务中，通常其中一个称为“正类”positive class，另一个称为“负类”negative class；<br>“多分类”任务，一般预测任务是希望通过对训练集进行学习，建立一个从输入空间到输出空间的映射。</p>
</blockquote>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li><p><strong>testing&amp;test sample</strong></p>
<blockquote>
<p>学得模型后，使用其进行预测的过程称为“测试”testing，<br>被预测的样本称为“测试样本”（test sample）。</p>
</blockquote>
</li>
<li><p><strong>clustering</strong></p>
<blockquote>
<p>即将训练集中的西瓜分成若干组，每组称为一个“簇”（cluster）；<br>这些自动形成的簇可能对应一些潜在的概念划分，例如“浅色瓜”，“深色瓜”，甚至“本地瓜”、“外地瓜”；<br><strong>注意，在聚类学习中，“浅色瓜”“本地瓜”这样的概念我们事先是不知道的；而且在学习过程中使用的训练样本通常不拥有标记信息</strong>。</p>
</blockquote>
</li>
<li><p><strong>监督学习与无监督学习</strong></p>
<blockquote>
<p>根据训练数据是否拥有标记信息，学习任务可以大致划分为两大类“监督学习”和”无监督学习“；<br>分类和回归是前者的代表，聚类则是后者的代表。</p>
</blockquote>
</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li><strong>generalization</strong><blockquote>
<p>需要注意的是，机器学习的目标是使得学得的模型能很好的适用于“新样本”，而不是仅仅在训练样本上工作得很好；这种能力称为“泛化”。</p>
</blockquote>
</li>
<li><strong>distribution</strong><blockquote>
<p>通常假设样本空间中全体样本服从一个未知“分布”D，我们获得的每个样本都是独立地从这个分布善能采样获得的，即“独立同分布”。<br>一般而言，训练样本越多，我们得到的关于D的信息越多，这样就越有可能通过学习获得具有强泛化能力的模型。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>西瓜书</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习的分类</title>
    <url>/2020/09/27/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h1><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p><strong>supervised learning</strong><br>是指从标注数据中学习预测模型的机器学习问题。标注数据表示输入输出的对应关系，预测模型对给定的输入产生相应的输出。监督学习的本质是<strong>学习输入到输出的映射的统计规律</strong>。</p>
<p><font size="4," color="#008000"><strong>输入空间、特征空间和输出空间</strong></font></p>
<p>在监督学习中，将输入与输出所有可能取值的集合分别称为输入空间与输出空间。输入与输出空间可以是有限元素的集合，也可以是整个欧式空间。输入空间与输出空间可以是同一个空间，也可以是不同的空间；<strong>但是通常输出空间远远小于输入空间</strong>。</p>
<a id="more"></a>

<p>每个具体的输入是一个实例，通常由特征向量表示。这时，所有特征向量存在的空间称为特征空间。</p>
<p>特征空间的每一维对应于一个特征。有时假设输入空间与特征空间为相同的空间，对于它们不予区分；有时假设输入空间与特征空间为不同的空间，将实例从输入空间映射到特征空间。<strong>模型实际上都是定义在特征空间上的</strong>。</p>
<p>在监督学习中，将输入与输出看作是定义在输入（特征）空间与输出空间上的随机变量的取值。输入输出变量用大写字母表示，习惯上输入变量写作X，输出变量写作Y。输入输出变量的取值用小写字母表示，输入变量的取值写作x，输出变量的取值写作y。</p>
<p>变量可以是标量或者向量，都用相同类型字母表示。除特别声明外，默认为列向量。输入实例x的特征向量记作：<br>$$ x=(x^{(1)},x^{(2)},…,x^{(i)},…,x^{(n)})^T $$<br>$x^{(i)}$表示x的第i个特征。注意$x^{(i)}$和$x_i$不同，本书通常用$x_i$表示多个输入变量中的第i个变量，即<br>$$ x_i=(x^{(1)},x^{(2)},…,x^{(n)})^T $$<br>监督学习从训练数据集合中学习模型，对测试数据进行预测。训练数据由输入（或特征向量）与输出对组成，训练集通常表示为<br>$$T={(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$$<br>测试数据也由输入与输出对组成。输入与输出对又称为样本或者样本点。<br>输入变量X和输出变量Y有不同的类型，可以使连续的，也可以使离散的。<br>人们根据输入输出变量的不同类型，对预测任务给予不同的名称：</p>
<blockquote>
<p>输入变量与输出变量均为连续变量的预测问题称为<strong>回归问题</strong>；<br>输出变量为有限个离散变量的预测问题称为<strong>分类问题</strong>；<br>输入变量与输出变量均为变量序列的预测问题称为<strong>标注问题</strong>。</p>
</blockquote>
<p><font size="4," color="#008000"><strong>联合概率分布</strong></font></p>
<p>监督学习假设输入与输出的随机变量X和Y遵循联合概率分布$ P(X,Y) $。<br>$ P(X,Y) $表示分布函数，或者分布密度函数。注意在学习过程中，假定这一联合概率分布存在，但对学习系统来说，联合概率分布的具体定义是未知的。训练数据与测试数据被看作是依联合分布$ P(X,Y) $独立同分布产生的。统计学习假设数据存在一定的统计规律，X和Y具有联合概率分布就是监督学习关于数据的基本假设。</p>
<p><font size="4," color="#008000"><strong>假设空间</strong></font><br>监督学习的目的在于学习一个由输入到输出的映射，这一映射由模型来表示。<br>模型属于由输入空间到输出空间的映射的集合，这个集合就是假设空间。假设空间的确定意味着学习的范围的确定。<br>监督学习的模型可以是概率模型或者非概率模型，由条件概率分布$ P(Y|X) $或决策函数$ Y=f(X) $表示，随具体的输入进行相应的输出预测时，写作$ P(y|x) $或$ y=f(x) $。</p>
<p><font size="4," color="#008000"><strong>问题的形式化</strong></font></p>
<h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><p><strong>unsupervised learning</strong><br>无监督学习是指从无标注数据中学习预测模型的机器学习问题。无标注数据是自然的到的数据，预测模型表示数据的类别、转换或概率。<br>无监督学习的本质是学习数据中的统计规律或潜在结构。</p>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p><strong>reinforcement learning</strong><br>强化学习是指智能系统在与环境的连续互动中学习最优行为策略的机器学习问题。<br>假设智能系统与环境的互动基于马尔可夫决策过程，智能系统能观测到的是环境互动的到的数据序列。<br>强化学习的本质是学习最优的序贯决策（sequential analysis）。</p>
<h2 id="半监督学习与主动学习"><a href="#半监督学习与主动学习" class="headerlink" title="半监督学习与主动学习"></a>半监督学习与主动学习</h2><p><strong>semi-supervised learning</strong><br><strong>半监督学习</strong>是指利用标注数据和未标注数据学习预测模型的机器学习问题。<br>通常有少量标注数据、大量未标注数据，因为标注数据的构建往往需要人工，成本较高，未标注数据的收集不需太多成本。<br>半监督学习旨在利用未标注数据中的信息，辅助标注数据，进行监督学习，以较低的成本达到较好的学习效果。</p>
<p><strong>主动学习</strong>是指机器不断主动给出实例让教师进行标注，然后利用标注数据学习预测模型的机器学习问题。<br>通常的监督学习使用给定的标注数据，往往是随机的到的，可以看作是“被动学习”，主动学习的目标是找出对学习最有帮助的实例让人标注，以较小的标注代价，达到较好的学习效果。</p>
<p>半监督学习和主动学习更接近监督学习。</p>
<h1 id="按模型分类"><a href="#按模型分类" class="headerlink" title="按模型分类"></a>按模型分类</h1><h2 id="概率模型与非概率模型"><a href="#概率模型与非概率模型" class="headerlink" title="概率模型与非概率模型"></a>概率模型与非概率模型</h2><h2 id="线性模型与非线性模型"><a href="#线性模型与非线性模型" class="headerlink" title="线性模型与非线性模型"></a>线性模型与非线性模型</h2><p><strong>linear model&amp;&amp;non-linear model</strong><br>统计学习模型，特别是非概率模型，可以分为线性模型和非线性模型。<br>如果函数$y=f(x)$或$z=g(x)$则称模型是线性模型，否则称模型是非线性模型。<br>线性模型：</p>
<ul>
<li>感知机</li>
<li>线性支持向量机</li>
<li>k近邻</li>
<li>k均值</li>
<li>潜在语义分析</li>
</ul>
<p>非线性模型：</p>
<ul>
<li>核函数支持向量机</li>
<li>AdaBoost</li>
<li>神经网络</li>
</ul>
<h2 id="参数化模型与非参数化模型"><a href="#参数化模型与非参数化模型" class="headerlink" title="参数化模型与非参数化模型"></a>参数化模型与非参数化模型</h2><p><strong>parametric model&amp;&amp;parametric model</strong><br>参数化模型假设模型参数的维度固定，模型可以由有限维参数完全刻画；<br>非参数化模型假设模型参数的维度不固定或者说无穷大，随着训练数据量的增加而不断增大。</p>
<p>参数化模型：</p>
<ul>
<li>感知机</li>
<li>朴素贝叶斯</li>
<li>逻辑斯蒂回归</li>
<li>k均值</li>
<li>高斯混合模型</li>
</ul>
<p>非参数化模型：</p>
<ul>
<li>决策树</li>
<li>支持向量机</li>
<li>AdaBoost</li>
<li>k近邻</li>
<li>潜在语义分析</li>
<li>概率潜在语义分析</li>
<li>潜在狄利克雷分配</li>
</ul>
<h1 id="按算法分类"><a href="#按算法分类" class="headerlink" title="按算法分类"></a>按算法分类</h1><h2 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h2><p>在线学习是指每次接受一个样本，进行预测，之后学习模型，并不断重复该操作的机器学习。<br>在线学习可以是监督学习，也可以是无监督学习，强化学习本身就拥有在线学习的特点。</p>
<h2 id="批量学习"><a href="#批量学习" class="headerlink" title="批量学习"></a>批量学习</h2><p>批量学习一次接受所有数据，学习模型，之后进行预测。<br>有些实际应用的场景要求学习必修是在线的。<br>比如：</p>
<ul>
<li>数据一次达到无法存储，系统需要及时作出处理；</li>
<li>数据规模很大，不可能一次处理所有数据；</li>
<li>数据的模式随时间动态变化，需要算法快速适应新的模式。</li>
</ul>
<p>在线学习通常比批量学习更难，很难学到预测准确率更高的模型，因为每次模型更新中，可利用的数据有限。</p>
<h1 id="按技巧分类"><a href="#按技巧分类" class="headerlink" title="按技巧分类"></a>按技巧分类</h1><h2 id="贝叶斯学习"><a href="#贝叶斯学习" class="headerlink" title="贝叶斯学习"></a>贝叶斯学习</h2><p>贝叶斯学习，又称为贝叶斯推理，是统计学、机器学习中重要的方法。<br>其主要的想法是，在概率模型的学习和推理中，利用贝叶斯定理，计算在给定数据条件下模型的条件概率，即后验概率，并应用这个原理进行模型的估计，以及对数据的预测。<br>将模型、未观察要素及其参数用变量表示，使用模型的先验分布是贝叶斯学习的特点。</p>
<h2 id="核方法"><a href="#核方法" class="headerlink" title="核方法"></a>核方法</h2><p>核方法是使用核函数表示核学习非线性模型的一种机器学习方法，可以用于监督学习和无监督学习。。<br>有一些线性模型的学习方法基于相似度计算，更具体地，向量内积计算。<br>核方法可以把它们扩展到非线性模型的学习，使其应用范围更广泛。<br>把线性模型扩展到非线性模型模型，直接的做法是显式地定义从输入空间（低维空间）到特征空间（高维空间）的映射，在特征空间中进行内积计算。比如，支持向量机，把输出空间的线性不可分问题转化为特征空间的线性可分问题。<br>核方法的技巧在于不显式地定义这个映射，而是直接定义核函数，即映射之后在特征空间的内积。。</p>
]]></content>
      <categories>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>西瓜书——NFL&amp;History&amp;Appln</title>
    <url>/2020/09/30/%E8%A5%BF%E7%93%9C%E4%B9%A6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><ul>
<li>“没有免费的午餐”定理</li>
<li>ML发展历程</li>
<li>ML应用现状<a id="more"></a>
<h1 id="NFL-Theorem"><a href="#NFL-Theorem" class="headerlink" title="NFL Theorem"></a>NFL Theorem</h1></li>
</ul>
<h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><blockquote>
<p>机器学习是人工智能研究发展到一定阶段的必然产物</p>
</blockquote>
<ul>
<li>20世纪50年代到70年代初<ul>
<li>人工智能研究处于“推理期”</li>
<li>人们基于符号知识表示，通过演绎推理技术取得了很大成就；</li>
</ul>
</li>
<li>20世纪70年代中期开始<ul>
<li>人工智能研究进入了“知识期”</li>
<li>人们基于符号知识表示，通过获取和利用领域知识来建立专家系统取得了大量成果；</li>
</ul>
</li>
<li>20世纪90年代中期<ul>
<li>“统计学习”闪亮登场并迅速占领主流舞台</li>
<li>SVM“支持向量机”，“核方法”</li>
</ul>
</li>
<li>21世纪初<ul>
<li>连接主义卷土重来</li>
<li>“深度学习”，“神经网络”</li>
</ul>
</li>
</ul>
<h1 id="应用现状"><a href="#应用现状" class="headerlink" title="应用现状"></a>应用现状</h1><!-- more -->]]></content>
      <categories>
        <category>西瓜书</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>西瓜书——假设空间与归纳偏好</title>
    <url>/2020/09/29/%E8%A5%BF%E7%93%9C%E4%B9%A6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="归纳于演绎"><a href="#归纳于演绎" class="headerlink" title="归纳于演绎"></a>归纳于演绎</h1><p><strong>Induction&amp;&amp;Deduction</strong></p>
<blockquote>
<p><strong>归纳</strong>和<strong>演绎</strong>是科学推理的两大基本手段<br>前者是从特殊到一般的泛化过程：即从具体的事实归结出一般性的规律；<br>后者是从一般到特殊的特化过程：即从基础原理推理出具体情况。</p>
</blockquote>
<a id="more"></a>

<ul>
<li>归纳学习<ul>
<li>“从样例中学习”显然是一个归纳过程，因此叫归纳学习；</li>
</ul>
</li>
</ul>
<blockquote>
<p>归纳学习有狭义和广义之分:<br>广义的归纳学习大体相当于从样例中学习；<br>狭义的归纳学习则要求从训练数据中学得概念，因此也被称为“概念学习”或者“概念形成”。</p>
</blockquote>
<ul>
<li>概念学习<ul>
<li>布尔概念学习：即对“是”“不是”这样的可表示为0/1布尔值的目标概念的学习。</li>
</ul>
</li>
</ul>
<h1 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h1><p><strong>Hypothesis Space</strong><br>还是以分别西瓜的好坏为例子（这就是一个布尔概念学习）：<br>有一下的训练数据集：</p>
<div class="note default"><table>
<thead>
<tr>
<th>编号</th>
<th>色泽</th>
<th>根蒂</th>
<th>敲声</th>
<th>好瓜</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>青绿</td>
<td>蜷缩</td>
<td>浊响</td>
<td>是</td>
</tr>
<tr>
<td>2</td>
<td>乌黑</td>
<td>蜷缩</td>
<td>浊响</td>
<td>是</td>
</tr>
<tr>
<td>3</td>
<td>青绿</td>
<td>硬挺</td>
<td>清脆</td>
<td>否</td>
</tr>
<tr>
<td>4</td>
<td>乌黑</td>
<td>稍蜷</td>
<td>沉闷</td>
<td>否</td>
</tr>
</tbody></table>
</div>

<blockquote>
<p>好瓜 &lt;-&gt; (色泽=?)^(根蒂=?)^(敲声=?)<br>这里的？表示尚未确定的取值，而我们的任务就是通过对上表的训练进行学习，把？确定下来</p>
</blockquote>
<p>我们可以把学习过程看作一个在所设假设组成的空间中进行搜索的过程，搜索目标是找到与训练集“匹配”的假设，即能够将训练集中的瓜判断正确的假设。</p>
<blockquote>
<p>比如这里的色泽有“青绿”“乌黑”“浅白”这三种可能取值；还需考虑到，也许“色泽”无论取什么值都合适，我们这里用通配符“*”来表示。<br>此外，还要考虑极端情况：有可能“好瓜”这个概念并不存在，世界上没有“好瓜”这种东西。<br>于是我们的假设空间规模大小：<br> $$ 4\times4\times4+1=65 $$</p>
</blockquote>
<p>可以有许多策略对这个假设空间进行搜索，例如自顶向下、从一般到特殊，或者自底向上、从特殊到一般，搜索过程中可以不断删除与正例不一致的假设，和（或）与反例一致的假设。最终将会得到与训练集一致（即<strong>对所有训练样本能够进行正确判断</strong>）的假设，这就是我们学到的结果。</p>
<h2 id="版本空间"><a href="#版本空间" class="headerlink" title="版本空间"></a>版本空间</h2><p><strong>Version Space</strong></p>
<blockquote>
<p>现实问题中我们常面临很大的假设空间，但是学习过程是基于有限样本训练集进行的。因此，可能有多个假设与训练集一致，即存在着一个与训练集一致的“假设集合”，我们称之为“<strong>版本空间</strong>”</p>
</blockquote>
<p><strong>例子</strong></p>
<ul>
<li>表中对应的版本空间<blockquote>
<p>(1) 色泽=* 根蒂=蜷缩 敲声=浊响<br>(2) 色泽=* 根蒂=蜷缩 敲声=*<br>(3) 色泽=* 根蒂=* 敲声=浊响</p>
</blockquote>
</li>
<li>表中若只包含编号1和编号4的两个样例，试给出相应的版本空间<blockquote>
<p>（1）色泽=青绿 根蒂=蜷缩 敲声=浊响<br>（2）色泽=青绿 根蒂=蜷缩 敲声=*<br>（3）色泽=青绿 根蒂=* 敲声=浊响<br>（4）色泽=* 根蒂=蜷缩 敲声=浊响<br>（5）色泽=青绿 根蒂=* 敲声=*<br>（6）色泽=* 根蒂=蜷缩 敲声=*<br>（7）色泽=* 根蒂=* 敲声=浊响</p>
</blockquote>
</li>
</ul>
<h1 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h1><p><strong>Inductive Bias</strong></p>
<p>在之前给出的训练数据集中，我们得到的版本空间会给我们带来一个麻烦：<br>现在有三个与训练集一致的假设，但是与他们对应的模型在面临新样本的时候，却会产生不同的输出。</p>
<blockquote>
<p>例如：对（色泽=青绿；根蒂=蜷缩；敲声=沉闷）这个新收来的瓜，<br>如果我们采用：好瓜 &lt;-&gt;(色泽=*)^(根蒂=蜷缩)^(敲声=*)<br>那么将会把这个瓜判断为好瓜。<br>但是如果采用其余两个假设，则判断结果将不是好瓜。</p>
</blockquote>
<p><strong>那么，应该采用哪个模型（假设）呢？</strong><br>这时，学习算法本身的“偏好”就会起到关键的作用。</p>
<blockquote>
<p>例如：<br>若我们的算法喜欢“尽可能特殊”的模型，则它会选择“好瓜 &lt;-&gt;(色泽=*)^(根蒂=蜷缩)^(敲声=浊响)”；<br>但若我们的算法喜欢“尽可能一般”的模型，并且由于某种原因它更“相信”根蒂，则它会选择“好瓜 &lt;-&gt;(色泽=*)^(根蒂=蜷缩)^(敲声=*)”。</p>
</blockquote>
<p>机器学习在学习过程中对某种类型假设的偏好，称为“<strong>归纳偏好</strong>”。</p>
<p>任何一个有效的机器学习算法必有其归纳偏好，否则它将被假设空间中看似在训练集上“等效”的假设所迷惑，而无法产生确定的学习结果，可以想象，如果没有偏好，我们的西瓜学习算法产生的模型每次在进行预测时随机抽选训练集上的等效假设，那么对这个新瓜（色泽=青绿；根蒂=蜷缩；敲声=沉闷），学得的模型时而告诉我们它是好的、时而告诉我们它是不好的，这样的学习结果显然是没有意义的。</p>
]]></content>
      <categories>
        <category>西瓜书</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>weekly contest 209</title>
    <url>/2020/10/04/weekly%20contest%20209/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>主要四道题目，1道easy，2道medium，1道hard<br>主要题目如下：</p>
<ul>
<li>Special Array With X Elements Greater Than or Equal X</li>
<li>Even Odd Tree</li>
<li>Find Valid Matrix Given Row and Column Sums</li>
<li>Minimum One Bit Operations to Make Integers Zero<a id="more"></a>

</li>
</ul>
<h1 id="Special-Array-With-X-Elements-Greater-Than-or-Equal-X"><a href="#Special-Array-With-X-Elements-Greater-Than-or-Equal-X" class="headerlink" title="Special Array With X Elements Greater Than or Equal X"></a>Special Array With X Elements Greater Than or Equal X</h1><p><a href="https://leetcode.com/contest/weekly-contest-209/problems/special-array-with-x-elements-greater-than-or-equal-x/">原题链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">specialArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">while</span>(x&lt;=nums[nums.size()<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;=x)count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x!=count)&#123;x++;count=<span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x==count? x:<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Even-Odd-Tree"><a href="#Even-Odd-Tree" class="headerlink" title="Even Odd Tree"></a>Even Odd Tree</h1><p><a href="https://leetcode.com/contest/weekly-contest-209/problems/even-odd-tree/">原题链接</a></p>
<h1 id="Find-Valid-Matrix-Given-Row-and-Column-Sums"><a href="#Find-Valid-Matrix-Given-Row-and-Column-Sums" class="headerlink" title="Find Valid Matrix Given Row and Column Sums"></a>Find Valid Matrix Given Row and Column Sums</h1><p><a href="https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/">原题链接</a></p>
<p>算法思想：greedy</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">restoreMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = row.size(), n = col.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">A</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n; ++j) &#123;</span><br><span class="line">                A[i][j] = min(row[i], col[j]);</span><br><span class="line">                row[i] -= A[i][j];</span><br><span class="line">                col[j] -= A[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Minimum-One-Bit-Operations-to-Make-Integers-Zero"><a href="#Minimum-One-Bit-Operations-to-Make-Integers-Zero" class="headerlink" title="Minimum One Bit Operations to Make Integers Zero"></a>Minimum One Bit Operations to Make Integers Zero</h1><p><a href="https://leetcode.com/contest/weekly-contest-209/problems/minimum-one-bit-operations-to-make-integers-zero/">原题链接</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/2020/10/09/DP/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>已知问题规模为n的前提A，求解一个未知解B。<br>此时，如果把问题规模降到0，即已知A0，可以得到A0-&gt;B。</p>
<ul>
<li>如果从A0添加一个元素，得到A1的变化过程，即A0-&gt;A1；进而有A1-&gt;2; A2-&gt;A3；……；Ai-&gt;Ai+1。这就是严格的归纳推理，也就是我们经常使用的<strong>数学归纳法</strong>；</li>
<li>对于Ai+1，只需要它的上一个状态Ai即可完成整个推理过程（而不需要更前序的状态）。我们将这个模型称为<strong>马尔可夫模型</strong>，对应的推理过程叫做<strong>“贪心法”</strong>。</li>
</ul>
<p>然而，Ai与Ai+1往往不是互为充要条件，随着i的增加，有价值的前提信息越来越少，我们无法仅仅通过上一个状态得到下一个状态，因此可以采用如下的方案：</p>
<ul>
<li>{A1-&gt;A2}; {A1, A2-&gt;A3}; {A1,A2,A3-&gt;A4};……; {A1,A2,…,Ai}-&gt;Ai+1. 这种方式就是第二数学归纳法。</li>
<li>对于Ai+1需要前面的所有前序状态才能完成推理过程。我们将这一模型称为高阶马尔科夫模型。对应的推理过程叫做“动态规划法”。</li>
</ul>
<a id="more"></a>

<h1 id="能用动态规划解决的问题的特点"><a href="#能用动态规划解决的问题的特点" class="headerlink" title="能用动态规划解决的问题的特点"></a>能用动态规划解决的问题的特点</h1><p>能采用动态规划求解的问题的一般要具有3个性质：</p>
<ul>
<li>（1）最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优结构，即满足最优化原理。</li>
<li>（2）无后效性：即某阶段状态一旦确定，就不受这个状态以后的决策影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。。</li>
<li>（3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。<br><font size="2," color="red"><strong>该性质并不是动态规划使用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势</strong></font></li>
</ul>
<h1 id="动态规划解题的一般思路"><a href="#动态规划解题的一般思路" class="headerlink" title="动态规划解题的一般思路"></a>动态规划解题的一般思路</h1><p>动态规划所处理的问题是一个多阶段决策的问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线（通常是最优的活动路线）。<br>动态规划的设计都有着一定的模式，一般要经历以下几个步骤：</p>
<center><font size="2," color="red">初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</font></center>

<ul>
<li><strong>划分阶段</strong>：按照问题的时间或者空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者可排序的，否则问题就无法求解。</li>
<li><strong>确定状态和状态变量</strong>：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</li>
<li><strong>确定决策并写出状态转移方程</strong>：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</li>
<li><strong>寻找边界条件</strong>：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</li>
</ul>
<h1 id="算法实现的步骤"><a href="#算法实现的步骤" class="headerlink" title="算法实现的步骤"></a>算法实现的步骤</h1><ol>
<li>创建一个一维数组或者二维数组，保存每一个子问题的结果，具体创建一维数组还是二维数组看题目而定，基本上如果题目中给出的是一个一维数组进行操作，就可以只创建一个一维数组，如果题目中给出了两个一维数组进行操作或者两种不同类型的变量值，比如背包问题中的不同物体的体积与总体积，找零钱问题中的不同面值零钱与总钱数，这样就需要创建一个二维数组。</li>
<li>设置数组边界值，一维数组就是设置第一个数字，二维数组就是设置第一行跟第一列的值，特别的滚动一维数组是要设置整个数组的值，然后根据后面不同的数据加进来变幻成不同的值。</li>
<li>找出状态转换方程，也就是说找到每个状态跟他上一个状态的关系，根据状态转化方程写出代码。</li>
<li>返回需要的值，一般是数组的最后一个或者二维数组的最右下角。</li>
</ol>
<p><strong>代码基本框架</strong>：</p>
<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><ul>
<li><p>递归</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> solutionFibonacci(n<span class="number">-1</span>)+solutionFibonacci(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态规划</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solutionFibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">			result[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">			result[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				result[i] = result[i<span class="number">-1</span>] + result[i<span class="number">-2</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result[n];</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="数组最大不连续递增子序列"><a href="#数组最大不连续递增子序列" class="headerlink" title="数组最大不连续递增子序列"></a>数组最大不连续递增子序列</h2><p>arr[] = {3,1,4,1,5,9,2,6,5}的最长递增子序列长度为4。即为：1,4,5,9</p>
<ul>
<li>设置一个数组temp，长度为原数组长度，数组第i个位置上的数字代表0…i上最长递增子序列。。当增加一个数字时，最大递增子序列可能变成前面最大的递增子序列+1，也可能就是前面最大递增子序列。</li>
<li>这需要让新增加进来的数组arr[i]跟前面所有数字比较大小，即<ul>
<li>当 arr[i] &gt; arr[j]，temp[i] = max{temp[j]}+1，其中，j 的取值范围为：0,1…i-1</li>
<li>当 arr[i] &lt; arr[j]，temp[i] = max{temp[j]}，j 的取值范围为：0,1…i-1</li>
</ul>
</li>
<li>所以在状态转换方程为$temp[i]=max{temp[i-1], temp[i-1]+1}$</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxChildArrayOrder</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = a.size();</span><br><span class="line">		<span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//temp[i]代表0...i上最长递增子序列</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			temp[i] = <span class="number">1</span>;<span class="comment">//初始值都为1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]&gt;a[j]&amp;&amp;temp[j]+<span class="number">1</span>&gt;temp[i])&#123;</span><br><span class="line">					<span class="comment">//如果有a[i]比它前面所有的数都大，则temp[i]为它前面的比它小的数的那一个temp+1取得的最大值</span></span><br><span class="line">					temp[i] = temp[j]+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> max = temp[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">//从temp数组里取出最大的值</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp[i]&gt;max)&#123;</span><br><span class="line">				max = temp[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字塔从上到下所有路径中和最大的路径"><a href="#数字塔从上到下所有路径中和最大的路径" class="headerlink" title="数字塔从上到下所有路径中和最大的路径"></a>数字塔从上到下所有路径中和最大的路径</h2><p>数字塔是第i行有i个数字组成，从上往下每个数字只能走到他正下方数字或者正右方数字，求数字塔从上到下所有路径中和最大的路径，如有下数字塔</p>
<p>3</p>
<p>1&emsp;5</p>
<p>8&emsp;4&emsp;3</p>
<p>2&emsp;6&emsp; 7&emsp;9</p>
<p>6&emsp;2&emsp;3&emsp;5&emsp;1</p>
<p>最大路径是3-5-3-9-5，和为25。我们可以分别从从上往下看跟从下往上看两种动态规划的方式去解这个题</p>
<p><strong>从上往下看</strong>：当从上往下看时，每进来新的一行，新的一行每个元素只能选择他正上方或者左左方的元素，也就是说，第一个元素只能连他上方的元素，最后一个元素只能连他左上方的元素，其他元素可以有两种选择，所以需要选择加起来更大的那一个数字，并把这个位置上的数字改成相应的路径值，具体过程如下图所示<br><img src="/2020/10/09/DP/1.jpg"></p>
<p>所以最大值就是最底层的最大值也就是25。<br>具体运算过程：</p>
<ol>
<li>建立一个n*n的二维数组$dp[][]$，n是数字塔最后一行的数字个数，二维数组每一行数字跟数字塔每一行数字个数一样，保存的值是从上方到这一个位置最大路径的值；</li>
<li>填入边界值$dp[0][0]=3$；</li>
<li>每一行除了第一个值跟最后一个值，其他的值选择上方或者左上方更大的值与这个位置上的值相加得来的值，即$dp[i][j]=Math.max(dp[i-1][j-1], dp[i-1][j]) + n[i][j]$。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> n[][])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> dp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[n.length][n.length];</span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = n[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n.length;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="comment">//如果是第一列，直接跟他上面数字相加</span></span><br><span class="line">					dp[i][j] = dp[i-<span class="number">1</span>][j] + n[i][j];</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">//如果不是第一列，比较他上面跟上面左面数字谁大，谁大就跟谁相加，放到这个位置</span></span><br><span class="line">					dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j]) + n[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">				max = Math.max(dp[i][j], max);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<p><strong>从下往上看时</strong>：从下往上看时大体思路跟从上往下看一样，但是要简单一些，因为不用考虑边界数据，从下往上看时，每进来上面一行，上面一行每个数字有两条路径到达下面一行，所以选一条最大的就可以<br><img src="/2020/10/09/DP/2.jpg"></p>
<p>具体方法也是建立一个二维数组，最下面一行数据添到二维数组最后一行，从下往上填数字，所以状态转化方程是$dp[i][j]=Math.max(dp[i+1][j+1], dp[i+1][j]) + n[i][j]$。</p>
<p>从下往上看跟从上往下看相比，虽然逻辑较为简单，但是从下往上看时需要得到完整的数字塔之后才能开始计算，而从上往下看时可以随着数字塔的深入来计算，也可以返回任意一层的结果，是最好的方法。</p>
<h2 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h2><p><a href="https://celia-qian.gitbook.io/leetcode-notebook-2020-2021/dp/dp">others</a></p>
<h1 id="动态规划和分治区别"><a href="#动态规划和分治区别" class="headerlink" title="动态规划和分治区别"></a>动态规划和分治区别</h1><p>动态规划算法：它通常用于求解具有某种<strong>最优性质</strong>的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。<strong>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的</strong>。</p>
<p>分治法：若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。</p>
<p>文章转载：<a href="https://blog.csdn.net/zw6161080123/article/details/80639932">六大算法之三：动态规划</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>西瓜书--模型评估与选择（上）</title>
    <url>/2020/10/07/%E8%A5%BF%E7%93%9C%E4%B9%A6%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="经验误差与过拟合"><a href="#经验误差与过拟合" class="headerlink" title="经验误差与过拟合"></a>经验误差与过拟合</h1><p>##错误率<br><strong>错误率</strong>（error rate）：分类错误的样本数占样本总数的比例<br><strong>精度</strong>（accuracy）：精度=1-错误率</p>
<blockquote>
<p>如果在m个样本中有a个样本分类错误，<br>则错误率：<br>$$E=a/m$$<br>精度：<br>$$1-a/m$$</p>
</blockquote>
<p><strong>误差error</strong>：学习器的实际预测输出与样本的真实输出之间的差异；<br><strong>训练误差/经验误差</strong>：学习器在训练集上的误差；<br><strong>泛化误差</strong>：在新样本上的误差。</p>
<p>我们希望得到泛化误差小的学习器，即在新样本上能表现得很好的学习器。。</p>
<h2 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h2><a id="more"></a>
<p><strong>overfitting&amp;underfitting</strong></p>
<p><strong>过拟合</strong>：当学习器把训练样本学得“太好了”的时候，很可能已经把训练样本自身的一些特点当作了所有潜在样本都会具有的一般性质，从而导致泛化能力下降。<br><strong>欠拟合</strong>：指对训练样本的一般性质尚未学好。</p>
<h2 id="造成过拟合和欠拟合的原因"><a href="#造成过拟合和欠拟合的原因" class="headerlink" title="造成过拟合和欠拟合的原因"></a>造成过拟合和欠拟合的原因</h2><blockquote>
<p>很多原因可能造成过拟合，其中最常见的情况是由于学习能力过于强大，以至于把训练集样本所包含的不太一般的特性都学到了；而欠拟合则通常是由于学习能力低下而造成的。<br>欠拟合比较容易克服，例如在决策树学习中扩展分支、在神经网络学习中增加训练轮数等。<br>而过拟合则很麻烦，而且无法避免，我们所能做到的只是“缓解”，或者说减小风险。</p>
</blockquote>
<h1 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h1><h2 id="留出法-hold-out"><a href="#留出法-hold-out" class="headerlink" title="留出法 hold-out"></a>留出法 hold-out</h2><p>直接将数据集D划分为两个互斥的集合，其中一个集合作为训练集S，另一个作为测试集T，即<br>$$D=SUT, ST=$$</p>
<h2 id="交叉验证法-cross-validation"><a href="#交叉验证法-cross-validation" class="headerlink" title="交叉验证法 cross validation"></a>交叉验证法 cross validation</h2><h2 id="自助法-bootstrapping"><a href="#自助法-bootstrapping" class="headerlink" title="自助法 bootstrapping"></a>自助法 bootstrapping</h2><h2 id="调参与最终模型"><a href="#调参与最终模型" class="headerlink" title="调参与最终模型"></a>调参与最终模型</h2>]]></content>
      <categories>
        <category>西瓜书</category>
      </categories>
      <tags>
        <tag>Machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Kosaraju&#39;s algorithm</title>
    <url>/2020/10/11/Kosaraju/</url>
    <content><![CDATA[<h1 id="Kosaraju-算法"><a href="#Kosaraju-算法" class="headerlink" title="Kosaraju 算法"></a>Kosaraju 算法</h1><ul>
<li>为了找到SCC分支，首先对图G运行DFS，计算出各顶点完成搜索的时间f；</li>
<li>然后计算图的逆图GT，对逆图也进行DFS搜索，但是这里搜索时顶点的访问次序不是按照顶点标号的大小，而是按照各顶点f值由大到小的顺序；</li>
<li>逆图DFS所得到的森林即对应连通区域。<a id="more"></a>

</li>
</ul>
<h2 id="SCC-强连通分量"><a href="#SCC-强连通分量" class="headerlink" title="SCC 强连通分量"></a>SCC 强连通分量</h2><p><strong>Strong Connected Component</strong></p>
<ul>
<li>A strongly connected component (SCC) of a directed graph is a maximal strongly connected subgraph.</li>
</ul>
<blockquote>
<p>there are 3 SCCs in the following graph</p>
</blockquote>
<img src="/2020/10/11/Kosaraju/1.jpg">

<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>We can find all strongly connected components in O(V+E) time using Kosaraju’s algorithm. Following is detailed <strong>Kosaraju’s algorithm</strong>.</p>
<ol>
<li>Create an empty stack ‘S’ and do DFS traversal of a graph. In DFS traversal, after calling recursive DFS for adjacent vertices of a vertex, push the vertex to stack. In the above graph, if we start DFS from vertex 0, we get vertices in stack as 1, 2, 4, 3, 0.</li>
<li>Reverse directions of all arcs to obtain the transpose graph.</li>
<li>One by one pop a vertex from S while S is not empty. Let the popped vertex be ‘v’. Take v as source and do DFS (call DFSUtil(v)). The DFS starting from v prints strongly connected component of v. In the above example, we process vertices in order 0, 3, 4, 2, 1 (One by one popped from stack).</li>
</ol>
<h2 id="How-does-this-work"><a href="#How-does-this-work" class="headerlink" title="How does this work?"></a>How does this work?</h2><p>DFS of a graph produces a single tree if all vertices are reachable from the DFS starting point. Otherwise DFS produces a forest. So DFS of a graph with only one SCC always produces a tree.</p>
<p>The important point to note is DFS may produce a tree or a forest when there are more than one SCCs depending upon the chosen starting point.</p>
<p>For example, in the above diagram, if we start DFS from vertices 0 or 1 or 2, we get a tree as output. And if we start from 3 or 4, we get a forest. To find and print all SCCs, we would want to start DFS from vertex 4 (which is a sink vertex), then move to 3 which is sink in the remaining set (set excluding 4) and finally any of the remaining vertices (0, 1, 2).</p>
<p>So how do we find this sequence of picking vertices as starting points of DFS? Unfortunately, there is no direct way for getting this sequence. However, if we do a DFS of graph and store vertices <strong>according to their finish times</strong>, we make sure that the <strong>finish time of a vertex that connects to other SCCs</strong> (other that its own SCC), will always <strong>be greater than</strong> finish time of vertices in the other SCC (See <a href="https://www.personal.kent.edu/~rmuhamma/Algorithms/MyAlgorithms/GraphAlgor/strongComponent.htm"><strong>this</strong></a> for proof).</p>
<p>For example, in DFS of above example graph, finish time of 0 is always greater than 3 and 4 (irrespective of the sequence of vertices considered for DFS). And finish time of 3 is always greater than 4. DFS doesn’t guarantee about other vertices, for example finish times of 1 and 2 may be smaller or greater than 3 and 4 depending upon the sequence of vertices considered for DFS.</p>
<p>So to use this property, we do DFS traversal of complete graph and push every finished vertex to a stack. In stack, 3 always appears after 4, and 0 appear after both 3 and 4.</p>
<p>In the next step, we reverse the graph. Consider the graph of SCCs. In the reversed graph, the edges that connect two components are reversed. So the SCC {0, 1, 2} becomes sink and the SCC {4} becomes source. As discussed above, in stack, we always have 0 before 3 and 4.</p>
<p>So if we do a DFS of the reversed graph using sequence of vertices in stack, we process vertices from sink to source (in reversed graph). That is what we wanted to achieve and that is all needed to print SCCs one by one.<br><img src="/2020/10/11/Kosaraju/2.jpg"></p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><ol>
<li>对原图G进行深度优先遍历，记录每个节点的离开时间；</li>
<li>选择具有最晚离开时间的顶点，对反图GT进行遍历，删除能够遍历到的顶点，这些顶点构成一个强连通分量；</li>
<li>如果还没有顶点删除，继续步骤2，否则结束算法。</li>
</ol>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>Oneway航班如何遍历所有的机场</li>
<li>Face book好友推荐</li>
</ul>
<h2 id="其他视频讲解"><a href="#其他视频讲解" class="headerlink" title="其他视频讲解"></a>其他视频讲解</h2><p><a href="https://www.youtube.com/watch?v=qz9tKlF431k">Google 面试：机场问题</a><br>PS：评论区太搞笑了，哈哈哈哈哈哈</p>
<p><a href="https://www.youtube.com/watch?v=RpgcYiky7uw">印度小哥推到过程</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>weekly contest 210</title>
    <url>/2020/10/11/weekly%20contest%20210/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul>
<li>Maximum Nesting Depth of the Parentheses 字符串</li>
<li>Maximal Network Rank 图 brute force</li>
<li>Split Two Strings to Make Palindrome 回文字符 hash</li>
<li>Count Subtrees With Max Distance Between Cities<a id="more"></a>

</li>
</ul>
<h1 id="Maximum-Nesting-Depth-of-the-Parentheses"><a href="#Maximum-Nesting-Depth-of-the-Parentheses" class="headerlink" title="Maximum Nesting Depth of the Parentheses"></a>Maximum Nesting Depth of the Parentheses</h1><p><a href="https://leetcode.com/contest/weekly-contest-210/problems/maximum-nesting-depth-of-the-parentheses/">原题链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> n : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="string">&#x27;(&#x27;</span>&amp;&amp;depth &gt;= <span class="number">0</span>)&#123;depth++; res=max(depth,res);&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="string">&#x27;)&#x27;</span>)depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Maximal-Network-Rank"><a href="#Maximal-Network-Rank" class="headerlink" title="Maximal Network Rank"></a>Maximal Network Rank</h1><p><a href="https://leetcode.com/contest/weekly-contest-210/problems/maximal-network-rank/">原题链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">100</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">bool</span> lnk [MAX][MAX];<span class="comment">//ai和bi之间是否有边</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAX];<span class="comment">//每个节点边的个数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximalNetworkRank</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; roads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = roads.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)lnk[i][j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = roads[i][<span class="number">0</span>], b = roads[i][<span class="number">1</span>];</span><br><span class="line">            cnt[a] += <span class="number">1</span>; cnt[b] += <span class="number">1</span>;</span><br><span class="line">            lnk[a][b] = lnk[b][a] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;  i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur =cnt[i] + cnt[j] - (lnk[i][j] ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                ans= max(ans, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Split-Two-Strings-to-Make-Palindrome"><a href="#Split-Two-Strings-to-Make-Palindrome" class="headerlink" title="Split Two Strings to Make Palindrome"></a>Split Two Strings to Make Palindrome</h1><p><a href="https://leetcode.com/contest/weekly-contest-210/problems/split-two-strings-to-make-palindrome/">原题链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            <span class="keyword">if</span>(s[l++]!=s[r--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = a.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] == b[j])</span><br><span class="line">        ++i, --j;</span><br><span class="line">    <span class="keyword">return</span> isPalindrome(a, i, j) || isPalindrome(b, i, j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkPalindromeFormation</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> check(a, b) || check(b, a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Count-Subtrees-With-Max-Distance-Between-Cities"><a href="#Count-Subtrees-With-Max-Distance-Between-Cities" class="headerlink" title="Count Subtrees With Max Distance Between Cities"></a>Count Subtrees With Max Distance Between Cities</h1><p><a href="https://leetcode.com/contest/weekly-contest-210/problems/count-subtrees-with-max-distance-between-cities/">原题链接</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>CV Tutorial week 1</title>
    <url>/2020/10/06/CVT1/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul>
<li>Give a definition of “Computer Vision”.</li>
<li>What type of information is extracted in each of the following applications.</li>
<li>Vision is often described as an “ill-posed, inverse problem”. Briefly describe what is meant by the terms “ill-posed” and “inverse problem” and their opposites “well-posed” and “forward problems”.</li>
<li>What is a “prior” and how does it help solve the ill-posed, inverse problem of vision? Give examples of priors.<a id="more"></a>


</li>
</ul>
]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
</search>
